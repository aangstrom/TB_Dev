{
  "entityType" : "DASHBOARD",
  "entity" : {
    "assignedCustomers" : null,
    "configuration" : {
      "description" : "",
      "widgets" : {
        "13ab3ad2-6f50-a808-e2e0-aab3e28c34e8" : {
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1730020369650,
                  "endTimeMs" : 1730106769650
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "enableSearch" : true,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "email",
              "displayEntityName" : false,
              "displayEntityType" : false,
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "true",
              "entitiesTitle" : "Smart Retail Users",
              "entityNameColumnTitle" : "Name",
              "displayEntityLabel" : false,
              "useRowStyleFunction" : false
            },
            "title" : "Smart Retail Users",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "titleStyle" : {
              "fontSize" : "24px",
              "fontWeight" : 700,
              "padding" : "5px 10px 5px 10px",
              "height" : "60px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "9b171800-9363-3259-f036-851c5f1746f9",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "email",
                "type" : "entityField",
                "label" : "Email",
                "color" : "#2196f3",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.5669544029828533
              }, {
                "name" : "firstName",
                "type" : "entityField",
                "label" : "First name",
                "color" : "#4caf50",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.835575628975763
              }, {
                "name" : "lastName",
                "type" : "entityField",
                "label" : "Last name",
                "color" : "#f44336",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.7276117794959098
              } ]
            } ],
            "actions" : {
              "rowClick" : [ ],
              "actionCellButton" : [ {
                "name" : "Edit user",
                "icon" : "edit",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #addEntityForm=\"ngForm\" [formGroup]=\"editUserFormGroup\"\n      (ngSubmit)=\"save()\" class=\"add-entity-form\" style=\"width: 600px;\">\n  <mat-toolbar fxLayout=\"row\" color=\"primary\">\n    <h2>Edit Smart Retail User</h2>\n    <span fxFlex></span>\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content fxLayout=\"column\">\n    <mat-form-field fxFlex class=\"mat-block\">\n        <mat-label>Email</mat-label>\n        <input matInput formControlName=\"email\" type=\"email\" required>\n        <mat-error *ngIf=\"editUserFormGroup.get('email').hasError('required')\">\n            Email is required\n        </mat-error>\n        <mat-error *ngIf=\"editUserFormGroup.get('email').hasError('pattern')\">\n            Invalid value format\n        </mat-error>\n    </mat-form-field>\n    <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\n        <mat-form-field fxFlex class=\"mat-block\">\n            <mat-label>First Name</mat-label>\n            <input matInput formControlName=\"firstName\">\n        </mat-form-field>\n        <mat-form-field fxFlex class=\"mat-block\">\n            <mat-label>Last Name</mat-label>\n            <input matInput formControlName=\"lastName\" >\n        </mat-form-field>\n    </div>\n  </div>\n  <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n    <button mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button mat-button mat-raised-button color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || editUserFormGroup.invalid || !editUserFormGroup.dirty\">\n      Save user\n    </button>\n  </div>\n</form>\n",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet userService = $injector.get(widgetContext.servicesMap.get('userService'));\n\nopenEditUserDialog();\n\nfunction openEditUserDialog() {\n  customDialog.customDialog(htmlTemplate, EditUserDialogController).subscribe();\n}\n\nfunction EditUserDialogController(instance) {\n  let vm = instance;\n  \n  vm.user = {};\n  \n  vm.editUserFormGroup = vm.fb.group({\n    email: ['', [vm.validators.required, vm.validators.pattern(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\_\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)]],\n    firstName: [null],\n    lastName: [null]\n  });\n  \n  getUser();\n  \n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n  \n  vm.save = function () {\n    vm.editUserFormGroup.markAsPristine();\n    saveUserObservable().subscribe(\n      function () {\n        widgetContext.updateAliases();\n        vm.dialogRef.close(null);\n      }\n    );\n  };\n  \n  function getUser() {\n      userService.getUser(entityId.id).subscribe(\n          (user) => {\n                vm.user = user;          \n                vm.editUserFormGroup.patchValue({\n                  email: vm.user.email,\n                  firstName: vm.user.firstName,\n                  lastName: vm.user.lastName\n                }, {emitEvent: false});\n          }\n    );\n  }\n  \n  function saveUserObservable() {\n      const formValues = vm.editUserFormGroup.value;\n      vm.user.email = formValues.email;\n      vm.user.firstName = formValues.firstName;\n      vm.user.lastName = formValues.lastName;\n      return userService.saveUser(vm.user);\n  }\n}\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "449af9be-1767-a18a-2e1b-cfba5b6ee674"
              }, {
                "name" : "Delete user",
                "icon" : "delete",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "var $injector = widgetContext.$scope.$injector;\nvar dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nvar userService = $injector.get(widgetContext.servicesMap.get('userService'));\n\nopenDeleteUserDialog();\n\nfunction openDeleteUserDialog() {\n  var title = 'Are you sure you want to delete the user ' + entityName + '?';\n  var content = 'Be careful, after the confirmation, the user and all related data will become unrecoverable!';\n  dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n    function(result) {\n      if (result) {\n        deleteUser();\n      }\n    }\n  );\n}\n\nfunction deleteUser() {\n  userService.deleteUser(entityId.id).subscribe(\n    function() {\n      widgetContext.updateAliases();\n    }\n  );\n}\n",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "b8747e47-5bc7-db5a-8f81-816c24eec09a"
              } ],
              "headerButton" : [ {
                "name" : "Add user",
                "icon" : "add",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #addEntityForm=\"ngForm\" [formGroup]=\"addUserFormGroup\"\n      (ngSubmit)=\"save()\" class=\"add-entity-form\" style=\"width: 600px;\">\n  <mat-toolbar fxLayout=\"row\" color=\"primary\">\n    <h2>Add Smart Retail User</h2>\n    <span fxFlex></span>\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content fxLayout=\"column\">\n    <mat-form-field fxFlex class=\"mat-block\">\n        <mat-label>Email</mat-label>\n        <input matInput formControlName=\"email\" type=\"email\" required>\n        <mat-error *ngIf=\"addUserFormGroup.get('email').hasError('required')\">\n            Email is required\n        </mat-error>\n        <mat-error *ngIf=\"addUserFormGroup.get('email').hasError('pattern')\">\n            Invalid value format\n        </mat-error>\n    </mat-form-field>\n    <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\n        <mat-form-field fxFlex class=\"mat-block\">\n            <mat-label>First Name</mat-label>\n            <input matInput formControlName=\"firstName\">\n        </mat-form-field>\n        <mat-form-field fxFlex class=\"mat-block\">\n            <mat-label>Last Name</mat-label>\n            <input matInput formControlName=\"lastName\" >\n        </mat-form-field>\n    </div>\n    <mat-form-field fxFlex class=\"mat-block\">\n        <mat-label>Activation method</mat-label>\n        <mat-select formControlName=\"userActivationMethod\">\n            <mat-option *ngFor=\"let method of activationMethods\" [value]=\"method.value\">\n                {{ method.name }}\n            </mat-option>\n        </mat-select>\n    </mat-form-field>\n  </div>\n  <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n    <button mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button mat-button mat-raised-button color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || addUserFormGroup.invalid || !addUserFormGroup.dirty\">\n      Add user\n    </button>\n  </div>\n</form>\n",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet userService = $injector.get(widgetContext.servicesMap.get('userService'));\nlet entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nlet dashboardService = $injector.get(widgetContext.servicesMap.get('dashboardService'));\n\nopenAddUserDialog();\n\nfunction openAddUserDialog() {\n  customDialog.customDialog(htmlTemplate, AddUserDialogController).subscribe();\n}\n\nfunction AddUserDialogController(instance) {\n  let vm = instance;\n  \n  vm.activationMethods = [\n        {\n            value: 'displayActivationLink',\n            name: 'Display activation link'\n        },\n        {\n            value: 'sendActivationMail',\n            name: 'Send activation email'\n        }\n  ];\n\n  vm.addUserFormGroup = vm.fb.group({\n    email: ['', [vm.validators.required, vm.validators.pattern(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\_\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)]],\n    firstName: [null],\n    lastName: [null],\n    userActivationMethod: ['displayActivationLink']\n  });\n  \n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n  \n  vm.save = function () {\n    var customerId;\n    if (widgetContext.currentUser.authority === 'TENANT_ADMIN') {\n        customerId = widgetContext.stateController.getStateParams().entityId;\n    } else {\n        customerId = { id: widgetContext.currentUser.customerId, entityType: 'CUSTOMER'};\n    }\n    vm.addUserFormGroup.markAsPristine();\n    \n    const formValues = vm.addUserFormGroup.value;\n    let user = {\n      email: formValues.email,\n      firstName: formValues.firstName,\n      lastName: formValues.lastName,\n      authority: 'CUSTOMER_USER',\n      customerId: customerId\n    };\n    const sendActivationMail = (formValues.userActivationMethod === 'sendActivationMail');\n    \n    widgetContext.rxjs.forkJoin([\n        getTargetUserGroup(customerId), \n        getDashboardByName('Smart Supermarket')\n    ]).pipe(\n        widgetContext.rxjs.switchMap((data) => {\n            var userGroup = data[0];\n            var defaultDashboard = data[1];\n            if (defaultDashboard) {\n                user.additionalInfo = {\n                    defaultDashboardId: defaultDashboard.id.id,\n                    defaultDashboardFullscreen: true\n                };\n            }\n            return saveUserObservable(userGroup, user, sendActivationMail);\n        })\n    ).subscribe((user) => {\n        widgetContext.updateAliases();\n        if (formValues.userActivationMethod === 'displayActivationLink') {\n            userService.getActivationLink(user.id.id).subscribe(\n                (activationLink) => {\n                    displayActivationLink(activationLink).subscribe(\n                        () => {\n                            vm.dialogRef.close(null);\n                        }\n                    );\n                }\n            );\n        } else {\n            vm.dialogRef.close(null);\n        }\n    });\n  };\n  \n  function saveUserObservable(userGroup, user, sendActivationMail) {\n      return userService.saveUser(user, sendActivationMail, userGroup.id.id);\n  }\n  \n  function getTargetUserGroup(customerId) {\n      return entityGroupService.getEntityGroupsByOwnerId(customerId.entityType, customerId.id, 'USER').pipe(\n          widgetContext.rxjs.switchMap((groups) => {\n              return getOrCreateUserGroup(groups, 'Smart Retail Users', customerId);\n          })\n      );\n  }\n  \n  function getOrCreateUserGroup(groups, groupName, customerId) {\n      var usersGroup = groups.find(group => group.name === groupName);\n      if (usersGroup) {\n          return widgetContext.rxjs.of(usersGroup);\n      } else {\n          usersGroup = {\n              type: 'USER',\n              name: groupName,\n              ownerId: customerId\n          };\n          return entityGroupService.saveEntityGroup(usersGroup);\n      }\n  }\n  \n  function getDashboardByName(dashboardName) {\n      var dashboardsPageLink = widgetContext.pageLink(10, 0, dashboardName);\n      return dashboardService.getUserDashboards(null, null, dashboardsPageLink, {ignoreLoading: true}).pipe(\n          widgetContext.rxjs.map((data) => {\n            if (data.data.length) {\n                return data.data.find((dashboard) => dashboard.name === dashboardName);\n            } else {\n                return null;\n            }\n          })\n      );\n  }\n  \n    function displayActivationLink(activationLink) {\n        const template = '<form style=\"min-width: 400px;\">\\n' +\n            '  <mat-toolbar color=\"primary\">\\n' +\n            '    <h2 translate>user.activation-link</h2>\\n' +\n            '    <span fxFlex></span>\\n' +\n            '    <button mat-icon-button\\n' +\n            '            (click)=\"close()\"\\n' +\n            '            type=\"button\">\\n' +\n            '      <mat-icon class=\"material-icons\">close</mat-icon>\\n' +\n            '    </button>\\n' +\n            '  </mat-toolbar>\\n' +\n            '  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\\n' +\n            '  </mat-progress-bar>\\n' +\n            '  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\\n' +\n            '  <div mat-dialog-content tb-toast toastTarget=\"activationLinkDialogContent\">\\n' +\n            '    <div class=\"mat-content\" fxLayout=\"column\">\\n' +\n            '      <span [innerHTML]=\"\\'user.activation-link-text\\' | translate: {activationLink: activationLink}\"></span>\\n' +\n            '      <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\\n' +\n            '        <pre class=\"tb-highlight\" fxFlex><code>{{ activationLink }}</code></pre>\\n' +\n            '        <button mat-icon-button\\n' +\n            '                color=\"primary\"\\n' +\n            '                ngxClipboard\\n' +\n            '                cbContent=\"{{ activationLink }}\"\\n' +\n            '                (cbOnSuccess)=\"onActivationLinkCopied()\"\\n' +\n            '                matTooltip=\"{{ \\'user.copy-activation-link\\' | translate }}\"\\n' +\n            '                matTooltipPosition=\"above\">\\n' +\n            '          <mat-icon svgIcon=\"mdi:clipboard-arrow-left\"></mat-icon>\\n' +\n            '        </button>\\n' +\n            '      </div>\\n' +\n            '    </div>\\n' +\n            '  </div>\\n' +\n            '  <div mat-dialog-actions fxLayoutAlign=\"end center\">\\n' +\n            '    <button mat-button color=\"primary\"\\n' +\n            '            type=\"button\"\\n' +\n            '            cdkFocusInitial\\n' +\n            '            [disabled]=\"(isLoading$ | async)\"\\n' +\n            '            (click)=\"close()\">\\n' +\n            '      {{ \\'action.ok\\' | translate }}\\n' +\n            '    </button>\\n' +\n            '  </div>\\n' +\n            '</form>';\n        return customDialog.customDialog(template, ActivationLinkDialogController, {activationLink: activationLink});\n    }\n\n    function ActivationLinkDialogController(instance) {\n        var vm = instance;\n\n        vm.activationLink = instance.data.activationLink;\n\n        vm.onActivationLinkCopied = onActivationLinkCopied;\n        vm.close = close;\n\n        function onActivationLinkCopied(){\n            widgetContext.showSuccessToast(translate.instant('user.activation-link-copied-message'), 1000, 'bottom', 'left', 'activationLinkDialogContent');\n        }\n\n        function close() {\n            vm.dialogRef.close(null);\n        }\n    }\n  \n}\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "f089248b-5725-30f6-58dd-64e50dfb0496"
              } ]
            },
            "showTitleIcon" : false,
            "titleTooltip" : "",
            "enableDataExport" : false,
            "widgetStyle" : { },
            "widgetCss" : "",
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "13ab3ad2-6f50-a808-e2e0-aab3e28c34e8",
          "typeFullFqn" : "system.cards.entities_table"
        },
        "8e6746d7-6409-dadf-d771-305702ab8eb4" : {
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1730020369650,
                  "endTimeMs" : 1730106769650
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "enableSearch" : true,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "email",
              "displayEntityName" : false,
              "displayEntityType" : false,
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "true",
              "entitiesTitle" : "Smart Retail Administrators",
              "entityNameColumnTitle" : "Name",
              "displayEntityLabel" : false,
              "useRowStyleFunction" : false
            },
            "title" : "Smart Retail Administrators",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "titleStyle" : {
              "fontSize" : "24px",
              "fontWeight" : 700,
              "padding" : "5px 10px 5px 10px",
              "height" : "60px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "396ed5c4-245e-e833-7786-8e0586746884",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "email",
                "type" : "entityField",
                "label" : "Email",
                "color" : "#2196f3",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.5669544029828533
              }, {
                "name" : "firstName",
                "type" : "entityField",
                "label" : "First name",
                "color" : "#4caf50",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.835575628975763
              }, {
                "name" : "lastName",
                "type" : "entityField",
                "label" : "Last name",
                "color" : "#f44336",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.7276117794959098
              } ]
            } ],
            "actions" : {
              "rowClick" : [ ],
              "actionCellButton" : [ {
                "name" : "Edit user",
                "icon" : "edit",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #addEntityForm=\"ngForm\" [formGroup]=\"editUserFormGroup\"\n      (ngSubmit)=\"save()\" class=\"add-entity-form\" style=\"width: 600px;\">\n  <mat-toolbar fxLayout=\"row\" color=\"primary\">\n    <h2>Edit Smart Retail Administrator</h2>\n    <span fxFlex></span>\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content fxLayout=\"column\">\n    <mat-form-field fxFlex class=\"mat-block\">\n        <mat-label>Email</mat-label>\n        <input matInput formControlName=\"email\" type=\"email\" required>\n        <mat-error *ngIf=\"editUserFormGroup.get('email').hasError('required')\">\n            Email is required\n        </mat-error>\n        <mat-error *ngIf=\"editUserFormGroup.get('email').hasError('pattern')\">\n            Invalid value format\n        </mat-error>\n    </mat-form-field>\n    <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\n        <mat-form-field fxFlex class=\"mat-block\">\n            <mat-label>First Name</mat-label>\n            <input matInput formControlName=\"firstName\">\n        </mat-form-field>\n        <mat-form-field fxFlex class=\"mat-block\">\n            <mat-label>Last Name</mat-label>\n            <input matInput formControlName=\"lastName\" >\n        </mat-form-field>\n    </div>\n  </div>\n  <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n    <button mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button mat-button mat-raised-button color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || editUserFormGroup.invalid || !editUserFormGroup.dirty\">\n      Save user\n    </button>\n  </div>\n</form>\n",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet userService = $injector.get(widgetContext.servicesMap.get('userService'));\n\nopenEditUserDialog();\n\nfunction openEditUserDialog() {\n  customDialog.customDialog(htmlTemplate, EditUserDialogController).subscribe();\n}\n\nfunction EditUserDialogController(instance) {\n  let vm = instance;\n  \n  vm.user = {};\n  \n  vm.editUserFormGroup = vm.fb.group({\n    email: ['', [vm.validators.required, vm.validators.pattern(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\_\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)]],\n    firstName: [null],\n    lastName: [null]\n  });\n  \n  getUser();\n  \n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n  \n  vm.save = function () {\n    vm.editUserFormGroup.markAsPristine();\n    saveUserObservable().subscribe(\n      function () {\n        widgetContext.updateAliases();\n        vm.dialogRef.close(null);\n      }\n    );\n  };\n  \n  function getUser() {\n      userService.getUser(entityId.id).subscribe(\n          (user) => {\n                vm.user = user;          \n                vm.editUserFormGroup.patchValue({\n                  email: vm.user.email,\n                  firstName: vm.user.firstName,\n                  lastName: vm.user.lastName\n                }, {emitEvent: false});\n          }\n    );\n  }\n  \n  function saveUserObservable() {\n      const formValues = vm.editUserFormGroup.value;\n      vm.user.email = formValues.email;\n      vm.user.firstName = formValues.firstName;\n      vm.user.lastName = formValues.lastName;\n      return userService.saveUser(vm.user);\n  }\n}\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "449af9be-1767-a18a-2e1b-cfba5b6ee674"
              }, {
                "name" : "Delete user",
                "icon" : "delete",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "var $injector = widgetContext.$scope.$injector;\nvar dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nvar userService = $injector.get(widgetContext.servicesMap.get('userService'));\n\nopenDeleteUserDialog();\n\nfunction openDeleteUserDialog() {\n  var title = 'Are you sure you want to delete the user ' + entityName + '?';\n  var content = 'Be careful, after the confirmation, the user and all related data will become unrecoverable!';\n  dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n    function(result) {\n      if (result) {\n        deleteUser();\n      }\n    }\n  );\n}\n\nfunction deleteUser() {\n  userService.deleteUser(entityId.id).subscribe(\n    function() {\n      widgetContext.updateAliases();\n    }\n  );\n}\n",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "b8747e47-5bc7-db5a-8f81-816c24eec09a"
              } ],
              "headerButton" : [ {
                "name" : "Add user",
                "icon" : "add",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #addEntityForm=\"ngForm\" [formGroup]=\"addUserFormGroup\"\n      (ngSubmit)=\"save()\" class=\"add-entity-form\" style=\"width: 600px;\">\n  <mat-toolbar fxLayout=\"row\" color=\"primary\">\n    <h2>Add Smart Retail Administrator</h2>\n    <span fxFlex></span>\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content fxLayout=\"column\">\n    <mat-form-field fxFlex class=\"mat-block\">\n        <mat-label>Email</mat-label>\n        <input matInput formControlName=\"email\" type=\"email\" required>\n        <mat-error *ngIf=\"addUserFormGroup.get('email').hasError('required')\">\n            Email is required\n        </mat-error>\n        <mat-error *ngIf=\"addUserFormGroup.get('email').hasError('pattern')\">\n            Invalid value format\n        </mat-error>\n    </mat-form-field>\n    <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\n        <mat-form-field fxFlex class=\"mat-block\">\n            <mat-label>First Name</mat-label>\n            <input matInput formControlName=\"firstName\">\n        </mat-form-field>\n        <mat-form-field fxFlex class=\"mat-block\">\n            <mat-label>Last Name</mat-label>\n            <input matInput formControlName=\"lastName\" >\n        </mat-form-field>\n    </div>\n    <mat-form-field fxFlex class=\"mat-block\">\n        <mat-label>Activation method</mat-label>\n        <mat-select formControlName=\"userActivationMethod\">\n            <mat-option *ngFor=\"let method of activationMethods\" [value]=\"method.value\">\n                {{ method.name }}\n            </mat-option>\n        </mat-select>\n    </mat-form-field>\n  </div>\n  <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n    <button mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button mat-button mat-raised-button color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || addUserFormGroup.invalid || !addUserFormGroup.dirty\">\n      Add user\n    </button>\n  </div>\n</form>\n",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet userService = $injector.get(widgetContext.servicesMap.get('userService'));\nlet entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nlet dashboardService = $injector.get(widgetContext.servicesMap.get('dashboardService'));\n\nopenAddUserDialog();\n\nfunction openAddUserDialog() {\n  customDialog.customDialog(htmlTemplate, AddUserDialogController).subscribe();\n}\n\nfunction AddUserDialogController(instance) {\n  let vm = instance;\n  \n  vm.activationMethods = [\n        {\n            value: 'displayActivationLink',\n            name: 'Display activation link'\n        },\n        {\n            value: 'sendActivationMail',\n            name: 'Send activation email'\n        }\n  ];\n\n  vm.addUserFormGroup = vm.fb.group({\n    email: ['', [vm.validators.required, vm.validators.pattern(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\_\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)]],\n    firstName: [null],\n    lastName: [null],\n    userActivationMethod: ['displayActivationLink']\n  });\n  \n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n  \n  vm.save = function () {\n    var customerId;\n    if (widgetContext.currentUser.authority === 'TENANT_ADMIN') {\n        customerId = widgetContext.stateController.getStateParams().entityId;\n    } else {\n        customerId = { id: widgetContext.currentUser.customerId, entityType: 'CUSTOMER'};\n    }\n    vm.addUserFormGroup.markAsPristine();\n    \n    const formValues = vm.addUserFormGroup.value;\n    let user = {\n      email: formValues.email,\n      firstName: formValues.firstName,\n      lastName: formValues.lastName,\n      authority: 'CUSTOMER_USER',\n      customerId: customerId\n    };\n    const sendActivationMail = (formValues.userActivationMethod === 'sendActivationMail');\n    \n    widgetContext.rxjs.forkJoin([\n        getTargetUserGroup(customerId), \n        getDashboardByName('Smart Supermarket Administration')\n    ]).pipe(\n        widgetContext.rxjs.switchMap((data) => {\n            var userGroup = data[0];\n            var defaultDashboard = data[1];\n            if (defaultDashboard) {\n                user.additionalInfo = {\n                    defaultDashboardId: defaultDashboard.id.id,\n                    defaultDashboardFullscreen: true\n                };\n            }\n            return saveUserObservable(userGroup, user, sendActivationMail);\n        })\n    ).subscribe((user) => {\n        widgetContext.updateAliases();\n        if (formValues.userActivationMethod === 'displayActivationLink') {\n            userService.getActivationLink(user.id.id).subscribe(\n                (activationLink) => {\n                    displayActivationLink(activationLink).subscribe(\n                        () => {\n                            vm.dialogRef.close(null);\n                        }\n                    );\n                }\n            );\n        } else {\n            vm.dialogRef.close(null);\n        }\n    });\n  };\n  \n  function saveUserObservable(userGroup, user, sendActivationMail) {\n      return userService.saveUser(user, sendActivationMail, userGroup.id.id);\n  }\n  \n  function getTargetUserGroup(customerId) {\n      return entityGroupService.getEntityGroupsByOwnerId(customerId.entityType, customerId.id, 'USER').pipe(\n          widgetContext.rxjs.switchMap((groups) => {\n              return getOrCreateUserGroup(groups, 'Smart Retail Administrators', customerId);\n          })\n      );\n  }\n  \n  function getOrCreateUserGroup(groups, groupName, customerId) {\n      var usersGroup = groups.find(group => group.name === groupName);\n      if (usersGroup) {\n          return widgetContext.rxjs.of(usersGroup);\n      } else {\n          usersGroup = {\n              type: 'USER',\n              name: groupName,\n              ownerId: customerId\n          };\n          return entityGroupService.saveEntityGroup(usersGroup);\n      }\n  }\n  \n  function getDashboardByName(dashboardName) {\n      var dashboardsPageLink = widgetContext.pageLink(10, 0, dashboardName);\n      return dashboardService.getUserDashboards(null, null, dashboardsPageLink, {ignoreLoading: true}).pipe(\n          widgetContext.rxjs.map((data) => {\n            if (data.data.length) {\n                return data.data.find((dashboard) => dashboard.name === dashboardName);\n            } else {\n                return null;\n            }\n          })\n      );\n  }\n  \n    function displayActivationLink(activationLink) {\n        const template = '<form style=\"min-width: 400px;\">\\n' +\n            '  <mat-toolbar color=\"primary\">\\n' +\n            '    <h2 translate>user.activation-link</h2>\\n' +\n            '    <span fxFlex></span>\\n' +\n            '    <button mat-icon-button\\n' +\n            '            (click)=\"close()\"\\n' +\n            '            type=\"button\">\\n' +\n            '      <mat-icon class=\"material-icons\">close</mat-icon>\\n' +\n            '    </button>\\n' +\n            '  </mat-toolbar>\\n' +\n            '  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\\n' +\n            '  </mat-progress-bar>\\n' +\n            '  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\\n' +\n            '  <div mat-dialog-content tb-toast toastTarget=\"activationLinkDialogContent\">\\n' +\n            '    <div class=\"mat-content\" fxLayout=\"column\">\\n' +\n            '      <span [innerHTML]=\"\\'user.activation-link-text\\' | translate: {activationLink: activationLink}\"></span>\\n' +\n            '      <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\\n' +\n            '        <pre class=\"tb-highlight\" fxFlex><code>{{ activationLink }}</code></pre>\\n' +\n            '        <button mat-icon-button\\n' +\n            '                color=\"primary\"\\n' +\n            '                ngxClipboard\\n' +\n            '                cbContent=\"{{ activationLink }}\"\\n' +\n            '                (cbOnSuccess)=\"onActivationLinkCopied()\"\\n' +\n            '                matTooltip=\"{{ \\'user.copy-activation-link\\' | translate }}\"\\n' +\n            '                matTooltipPosition=\"above\">\\n' +\n            '          <mat-icon svgIcon=\"mdi:clipboard-arrow-left\"></mat-icon>\\n' +\n            '        </button>\\n' +\n            '      </div>\\n' +\n            '    </div>\\n' +\n            '  </div>\\n' +\n            '  <div mat-dialog-actions fxLayoutAlign=\"end center\">\\n' +\n            '    <button mat-button color=\"primary\"\\n' +\n            '            type=\"button\"\\n' +\n            '            cdkFocusInitial\\n' +\n            '            [disabled]=\"(isLoading$ | async)\"\\n' +\n            '            (click)=\"close()\">\\n' +\n            '      {{ \\'action.ok\\' | translate }}\\n' +\n            '    </button>\\n' +\n            '  </div>\\n' +\n            '</form>';\n        return customDialog.customDialog(template, ActivationLinkDialogController, {activationLink: activationLink});\n    }\n\n    function ActivationLinkDialogController(instance) {\n        var vm = instance;\n\n        vm.activationLink = instance.data.activationLink;\n\n        vm.onActivationLinkCopied = onActivationLinkCopied;\n        vm.close = close;\n\n        function onActivationLinkCopied(){\n            widgetContext.showSuccessToast(translate.instant('user.activation-link-copied-message'), 1000, 'bottom', 'left', 'activationLinkDialogContent');\n        }\n\n        function close() {\n            vm.dialogRef.close(null);\n        }\n    }\n  \n}\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "f089248b-5725-30f6-58dd-64e50dfb0496"
              } ]
            },
            "showTitleIcon" : false,
            "titleTooltip" : "",
            "enableDataExport" : false,
            "widgetStyle" : { },
            "widgetCss" : "",
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "8e6746d7-6409-dadf-d771-305702ab8eb4",
          "typeFullFqn" : "system.cards.entities_table"
        }
      },
      "states" : {
        "default" : {
          "name" : "${entityName} User Management",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "13ab3ad2-6f50-a808-e2e0-aab3e28c34e8" : {
                  "sizeX" : 12,
                  "sizeY" : 12,
                  "row" : 0,
                  "col" : 0
                },
                "8e6746d7-6409-dadf-d771-305702ab8eb4" : {
                  "sizeX" : 12,
                  "sizeY" : 12,
                  "row" : 0,
                  "col" : 12
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "backgroundSizeMode" : "100%",
                "autoFillHeight" : true,
                "backgroundImageUrl" : null,
                "mobileAutoFillHeight" : true,
                "mobileRowHeight" : 70,
                "outerMargin" : true,
                "layoutType" : "default"
              }
            }
          }
        }
      },
      "entityAliases" : {
        "9b171800-9363-3259-f036-851c5f1746f9" : {
          "id" : "9b171800-9363-3259-f036-851c5f1746f9",
          "alias" : "Smart Retail Users",
          "filter" : {
            "type" : "entitiesByGroupName",
            "resolveMultiple" : true,
            "groupStateEntity" : true,
            "stateEntityParamName" : null,
            "groupType" : "USER",
            "entityGroupNameFilter" : "Smart Retail Users"
          }
        },
        "396ed5c4-245e-e833-7786-8e0586746884" : {
          "id" : "396ed5c4-245e-e833-7786-8e0586746884",
          "alias" : "Smart Retail Administrators",
          "filter" : {
            "type" : "entitiesByGroupName",
            "resolveMultiple" : true,
            "groupStateEntity" : true,
            "stateEntityParamName" : null,
            "groupType" : "USER",
            "entityGroupNameFilter" : "Smart Retail Administrators"
          }
        }
      },
      "filters" : {
        "b501464a-c33f-23de-f08a-f463b24e8248" : {
          "id" : "b501464a-c33f-23de-f08a-f463b24e8248",
          "filter" : "Retail company",
          "keyFilters" : [ {
            "key" : {
              "type" : "ATTRIBUTE",
              "key" : "type"
            },
            "valueType" : "STRING",
            "predicates" : [ {
              "keyFilterPredicate" : {
                "operation" : "EQUAL",
                "value" : {
                  "defaultValue" : "retail",
                  "dynamicValue" : null
                },
                "ignoreCase" : false,
                "type" : "STRING"
              },
              "userInfo" : {
                "editable" : true,
                "label" : "",
                "autogeneratedLabel" : true,
                "order" : 0
              }
            } ]
          } ],
          "editable" : false
        }
      },
      "timewindow" : {
        "displayValue" : "",
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "hideTimezone" : false,
        "selectedTab" : 0,
        "realtime" : {
          "realtimeType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "quickInterval" : "CURRENT_DAY"
        },
        "history" : {
          "historyType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "fixedTimewindow" : {
            "startTimeMs" : 1643114862287,
            "endTimeMs" : 1643201262287
          },
          "quickInterval" : "CURRENT_DAY"
        },
        "aggregation" : {
          "type" : "AVG",
          "limit" : 25000
        }
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : true,
        "showEntitiesSelect" : false,
        "showDashboardTimewindow" : false,
        "showDashboardExport" : true,
        "toolbarAlwaysOpen" : true,
        "titleColor" : "rgba(0,0,0,0.870588)",
        "showDashboardLogo" : false,
        "dashboardLogoUrl" : null,
        "hideToolbar" : false,
        "showFilters" : false,
        "showUpdateDashboardImage" : false,
        "dashboardCss" : ".tb-widget-container > .tb-widget {\n    border-radius: 8px;\n}\n\ngridster-item:not(.tb-noselect) > .tb-widget-container > .tb-widget {\n    cursor: default !important;\n}\n\n.tb-widget-container > .tb-widget .tb-table-widget .mat-row {\n    cursor: pointer;\n}\n\n.tb-widget-container > .tb-widget .tb-legend-keys {\n    cursor: pointer;\n}"
      }
    },
    "customerId" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "09c4a120-32a4-11ed-accb-016e0c746b7f"
    },
    "image" : null,
    "mobileHide" : false,
    "mobileOrder" : null,
    "name" : "Smart Supermarket User Management",
    "ownerId" : null,
    "title" : "Smart Supermarket User Management"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}