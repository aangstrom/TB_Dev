{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "scriptLang" : "TBEL",
      "decoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
      "tbelDecoder" : "var data = decodeToJson(payload);\r\nvar deviceName = \"eui-\"+data.deviceInfo.devEui;\r\nvar deviceType = \"sensor\";\r\nvar result;\r\nvar light;\r\nvar occupancy;\r\nvar motion;\r\nvar battery;\r\nvar latitude;\r\nvar longitude;\r\nvar status;\r\nvar sos;\r\nvar shock;\r\nvar firmware;\r\nvar ts;\r\nvar manomissione;\r\nvar temperature;\r\n\r\n//sensecap\r\nvar sensecap_array;\r\nif(data.object.messages!=null){\r\n    sensecap_array=data.object.messages[0];\r\n}\r\n//manomissione\r\nif(data.object.tamper_status!=null){\r\n    if(data.object.tamper_status==\"uninstalled\"){\r\n        manomissione=1;\r\n    }else{\r\n        manomissione=0;\r\n    }\r\n}\r\n//open/close\r\nif(data.object.magnet_status!=null){\r\n    if(data.object.magnet_status==\"open\"){\r\n        status=1;\r\n    }else{\r\n        status=0;\r\n    }\r\n}\r\n//temperature\r\nif(data.object.temperature!=null){\r\n    temperature=data.object.temperature;\r\n}\r\n//light\r\nif(data.object.light!=null){\r\n    light=Math.round(data.object.light*100)/100;\r\n}\r\nif(data.object.light_level!=null){\r\n    light=Math.round(data.object.light_level*100)/100;\r\n}\r\n//battery\r\nif(data.object.battery!=null){\r\n    battery=Math.round(data.object.battery*100)/100;\r\n}\r\n//battery from vdd\r\nif(data.object.vdd!=null){\r\n    var mvolts=data.object.vdd;\r\n    if(mvolts>=3000){\r\n    \tbattery=100;\r\n    }else if(mvolts>2900){\r\n    \tbattery=100-((3000-mvolts)*58)/100;\r\n    }else if(mvolts>2740){\r\n    \tbattery=42-((2900-mvolts)*24)/160;\r\n    }else if(mvolts>2440){\r\n    \tbattery=18-((2740-mvolts)*12)/300;\r\n    }else if(mvolts>2100){\r\n    \tbattery=6-((2440-mvolts)*6)/340;\r\n    }else{\r\n    \tbattery=0;\r\n    }\r\n}\r\n//motion\r\nif(data.object.motion!=null){\r\n    motion=Math.round(data.object.motion*100)/100;\r\n}\r\n//occupancy\r\nif(data.object.occupancy!=null){\r\n    occupancy=Math.round(data.object.occupancy*100)/100;\r\n}\r\nif(sensecap_array!=null){\r\n    for(var i = 0; i < sensecap_array.length; i++){\r\n        if(sensecap_array[i].type==\"Battery\"){\r\n            battery=Math.round(sensecap_array[i].measurementValue*100)/100;\r\n        }\r\n        if(sensecap_array[i].type==\"Latitude\"){\r\n            latitude=sensecap_array[i].measurementValue;\r\n            if(sensecap_array[i].timestamp!=null){\r\n                ts=sensecap_array[i].timestamp;\r\n            }\r\n        }\r\n        if(sensecap_array[i].type==\"Longitude\"){\r\n            longitude=sensecap_array[i].measurementValue;\r\n        }\r\n        if(sensecap_array[i].type==\"SOS Event\"){\r\n            sos=sensecap_array[i].measurementValue;\r\n        }\r\n        if(sensecap_array[i].type==\"Air Temperature\"){\r\n            temperature=sensecap_array[i].measurementValue;\r\n        }\r\n        if(sensecap_array[i].type==\"Light\"){\r\n            light=Math.round(sensecap_array[i].measurementValue*100)/100;\r\n        }\r\n        if(sensecap_array[i].type==\"Firmware Version\"){\r\n            firmware=sensecap_array[i].measurementValue;\r\n        }\r\n        if(sensecap_array[i].type==\"Timestamp\"){\r\n            ts=sensecap_array[i].measurementValue;\r\n        }\r\n        if(sensecap_array[i].type==\"Event Status\"){\r\n            var temporaneamente=sensecap_array[i].measurementValue;\r\n            if(sensecap_array[i].measurementValue.length>0){\r\n                for(var j=0;j<temporaneamente.length;j++){\r\n                    if(temporaneamente[j].eventName==\"SOS event.\"){\r\n                        sos=1;\r\n                    }\r\n                    if(temporaneamente[j].eventName==\"Shock event.\"){\r\n                        shock=1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nif(ts!=null){\r\n    result = {\r\n        deviceName: deviceName,\r\n        deviceType: deviceType,\r\n        attributes: {\r\n            DevEUI: data.deviceInfo.devEui,\r\n            fPort: data.fPort,\r\n            firmware: firmware,\r\n            first_hour: data.object.first_hour,\r\n            total_liter: data.object.liter,\r\n        },\r\n        telemetry: {\r\n            ts: ts,\r\n            values: {\r\n                battery: battery,\r\n                latitude: latitude,\r\n                longitude: longitude,\r\n                status: status,\r\n                sos: sos,\r\n                shock: shock,\r\n                temperature: temperature,\r\n                humidity: data.object.humidity,\r\n                light: light,\r\n                motion: motion,\r\n                soundAvg: data.object.soundAvg,\r\n                soundPeak: data.object.soundPeak,\r\n                vdd: data.object.vdd,\r\n                pressEvent: data.object.pressEvent,\r\n                batteryVoltage: data.object.batteryVoltage,\r\n                co2: data.object.co2,\r\n                formaldeide: data.object.hcho,\r\n                pir: data.object.pir,\r\n                occupancy: occupancy,\r\n                pm10: data.object.pm10,\r\n                pm2_5: data.object.pm2_5,\r\n                pressure: data.object.pressure,\r\n                tvoc: data.object.tvoc,\r\n                thermistorProperlyConnected: data.object.thermistorProperlyConnected,\r\n                water: data.object.water,\r\n                power: data.object.in1_ac_A*230,\r\n                current: data.object.in1_ac_A,\r\n                liter: data.object.liter,\r\n                first_hour: data.object.first_hour,\r\n                manomissione: manomissione,\r\n                string: data.object.string\r\n            }\r\n        }\r\n    };\r\n}else{\r\n    result = {\r\n        deviceName: deviceName,\r\n        deviceType: deviceType,\r\n        attributes: {\r\n            DevEUI: data.deviceInfo.devEui,\r\n            fPort: data.fPort,\r\n            firmware: firmware,\r\n            first_hour: data.object.first_hour,\r\n            total_liter: data.object.liter,\r\n        },\r\n        telemetry: {\r\n            battery: battery,\r\n            latitude: latitude,\r\n            longitude: longitude,\r\n            status: status,\r\n            sos: sos,\r\n            shock: shock,\r\n            temperature: temperature,\r\n            humidity: data.object.humidity,\r\n            light: light,\r\n            motion: motion,\r\n            soundAvg: data.object.soundAvg,\r\n            soundPeak: data.object.soundPeak,\r\n            vdd: data.object.vdd,\r\n            pressEvent: data.object.pressEvent,\r\n            batteryVoltage: data.object.batteryVoltage,\r\n            co2: data.object.co2,\r\n            formaldeide: data.object.hcho,\r\n            pir: data.object.pir,\r\n            occupancy: occupancy,\r\n            pm10: data.object.pm10,\r\n            pm2_5: data.object.pm2_5,\r\n            pressure: data.object.pressure,\r\n            tvoc: data.object.tvoc,\r\n            thermistorProperlyConnected: data.object.thermistorProperlyConnected,\r\n            water: data.object.water,\r\n            power: data.object.in1_ac_A*230,\r\n            current: data.object.in1_ac_A,\r\n            liter: data.object.liter,\r\n            first_hour: data.object.first_hour,\r\n            manomissione: manomissione,\r\n            string: data.object.string\r\n        }\r\n    };\r\n}\r\n\r\n\r\n\r\nfunction decodeToString(payload) {\r\n    return String.fromCharCode.apply(String, payload);\r\n}\r\n\r\nfunction decodeToJson(payload) {\r\n    var str = decodeToString(payload);\r\n    var data = JSON.parse(str);\r\n    return data;\r\n}\r\n\r\nreturn result;",
      "encoder" : null,
      "tbelEncoder" : null,
      "updateOnlyKeys" : [ "manufacturer" ]
    },
    "debugMode" : true,
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "a1f01060-be80-11ee-9101-d71950cabe39"
    },
    "name" : "Chirpstack Uplink",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}