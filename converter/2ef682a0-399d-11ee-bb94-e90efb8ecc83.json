{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "scriptLang" : "TBEL",
      "decoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName']\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
      "tbelDecoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\n// var payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n var data = decodeToJson(payload);\n\nvar deviceName = metadata.topic.split(\"/\")[2];\n//var deviceName = 'tracke001';\nvar deviceType = 'tracker';\n//var customerName = 'Customer C';\n//var groupName = 'thermostat devices';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n//var ts=data.tst;\nvar ts=data.created_at;\nvar latitude=parseFloat(data.lat);\nvar longitude=parseFloat(data.lon);\n\n\n// DEBUG\n\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n    deviceName: deviceName,\n    deviceType: deviceType,\n//  assetName: assetName,\n//  assetType: assetType,\n//  customerName: customerName,\n//  groupName: groupName,\n    attributes: {\n//        VIN: VIN,\n     },\n    telemetry: {\n        ts: ts,\n        \n        latitude: latitude,\n        longitude: longitude,\n            values: {\n/*            ang: ang,\n            pr: pr,\n            alt: alt,\n            sat: sat,\n            sp: sp,\n            evt: evt,\n           \n            Ignition: Ignition,\n            Movement: Movement,\n            GSM_Signal: GSM_Signal,\n            Sleep_Mode: Sleep_Mode,\n            GNSS_Status: GNSS_Status,\n            Battery_Level: Battery_Level,\n            BT_Status: BT_Status,\n            GNSS_PDOP: GNSS_PDOP,\n            GNSS_HDOP: GNSS_HDOP,\n            External_Voltage: External_Voltage,\n            Speed: Speed,\n            Battery_Voltage: Battery_Voltage,\n            Battery_Current: Battery_Current,\n            Axis_X: Axis_X,\n            Axis_Y: Axis_Y,\n            Axis_Z: Axis_Z,\n            Active_GSM_Operator: Active_GSM_Operator,\n            Trip_Odometer: Trip_Odometer,\n            Total_Odometer: Total_Odometer,\n            Fuel_Used_GPS: Fuel_Used_GPS,\n            Fuel_Rate_GPS: Fuel_Rate_GPS,\n            Ignition_On_Counter: Ignition_On_Counter,\n            ICCID1: ICCID1,\n            ICCID2: ICCID2,\n            ISO6709_Coordinates: ISO6709_Coordinates,\n            Eco_Score: Eco_Score,\n            Green_driving_type: Green_driving_type,\n            Green_Driving_Value: Green_Driving_Value,\n            Engine_Load: Engine_Load,\n            Coolant_Temperature: Coolant_Temperature,\n            Intake_MAP: Intake_MAP,\n            Vehicle_Speed: Vehicle_Speed,\n            Throttle_Position: Throttle_Position,\n            Fuel_Level: Fuel_Level,\n            Barometic_Pressure: Barometic_Pressure,\n            Ambient_Air_Temperature: Ambient_Air_Temperature,\n            Engine_RPM: Engine_RPM,\n            MAF: MAF,\n            Runtime_since_engine_start: Runtime_since_engine_start,\n            Distance_Traveled_MIL_On: Distance_Traveled_MIL_On,\n            Distance_Since_Codes_Clear: Distance_Since_Codes_Clear,\n            Control_Module_Voltage: Control_Module_Voltage,\n            Ignition_Counter: Ignition_Counter,\n            \n            \n            \n            \n*/           \n            rawData: data\n       }\n   }\n};\n\n\n\n/** Helper functions 'decodeToString' and 'decodeToJson' are already built-in **/\n\nreturn result;",
      "encoder" : null,
      "tbelEncoder" : null
    },
    "debugMode" : false,
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "2ef682a0-399d-11ee-bb94-e90efb8ecc83"
    },
    "name" : "OwnTrack",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}