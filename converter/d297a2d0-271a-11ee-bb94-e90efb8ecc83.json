{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "scriptLang" : "TBEL",
      "decoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName']\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
      "tbelDecoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\n// var payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n var data = decodeToJson(payload).state.reported;\n\nvar deviceName = metadata.topic.split(\"/\")[1];\n//var deviceName = 'tracke001';\nvar deviceType = 'tracker';\n//var customerName = 'Customer C';\n//var groupName = 'thermostat devices';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\nvar ts=data.ts;\n\nvar VIN=data.256;\nvar Ignition=data.239;\nvar Movement=data.240;\nvar GSM_Signal=data.21;\nvar Sleep_Mode=data.200;\nvar GNSS_Status=data.69;\nvar Battery_Level=data.113;\nvar BT_Status=data.263;\nvar GNSS_PDOP=data.181*0.1;\nvar GNSS_HDOP=data.182*0.1;\nvar External_Voltage=data.66*0.001;\nvar Speed=data.24;\nvar Battery_Voltage=data.67*0.001;\nvar Battery_Current=data.68*0.001;\nvar Axis_X=data.17;\nvar Axis_Y=data.18;\nvar Axis_Z=data.19;\nvar Active_GSM_Operator=data.241;\nvar Trip_Odometer=data.199*0.001;\nvar Total_Odometer=data.16*0.001;\nvar Fuel_Used_GPS=data.12*0.001;\nvar Fuel_Rate_GPS=data.13*0.01;\nvar Ignition_On_Counter=data.449;\nvar ICCID1=data.11;\nvar ICCID2=data.14;\nvar ISO6709_Coordinates=data.387;\nvar Eco_Score=data.15*0.01;\nvar Green_driving_type=data.253;\nvar Green_Driving_Value=data.254*0.01;\nvar Engine_Load=data.31;\nvar Coolant_Temperature=data.32;\nvar Intake_MAP=data.35;\nvar Vehicle_Speed=data.37;\nvar Throttle_Position=data.41;\nvar Fuel_Level=data.48;\nvar Barometic_Pressure=data.50;\nvar Ambient_Air_Temperature=data.53;\nvar Engine_RPM=data.36;\nvar MAF=data.40*0.01;\nvar Runtime_since_engine_start=data.42;\nvar Distance_Traveled_MIL_On=data.43;\nvar Distance_Since_Codes_Clear=data.49;\nvar Control_Module_Voltage=data.51*0.001;\nvar Ignition_Counter=data.449;\n\n\nvar latitude=parseFloat(data.latlng.split(',')[0]);\nvar longitude=parseFloat(data.latlng.split(',')[1]);\nvar ang=data.ang;\nvar pr=data.pr;\nvar alt=data.alt;\nvar sat=data.sat;\nvar sp=data.sp;\nvar evt=data.evt;\n\n\n// DEBUG\ndata.449=null;\ndata.239=null;\ndata.240=null;\ndata.21=null;\ndata.200=null;\ndata.69=null;\ndata.113=null;\ndata.263=null;\ndata.181=null;\ndata.182=null;\ndata.66=null;\ndata.24=null;\ndata.67=null;\ndata.68=null;\ndata.17=null;\ndata.18=null;\ndata.19=null;\ndata.241=null;\ndata.199=null;\ndata.16=null;\ndata.12=null;\ndata.13=null;\ndata.449=null;\ndata.11=null;\ndata.14=null;\ndata.387=null;\ndata.15=null;\ndata.ts=null;\ndata.253=null;\ndata.254=null;\ndata.31=null;\ndata.32=null;\ndata.35=null;\ndata.37=null;\ndata.41=null;\ndata.48=null;\ndata.50=null;\ndata.53=null;\ndata.36=null;\ndata.40=null;\ndata.42=null;\ndata.43=null;\ndata.49=null;\ndata.51=null;\ndata.256=null;\n\n\ndata.latlng=null;\ndata.ang=null;\ndata.pr=null;\ndata.alt=null;\ndata.sat=null;\ndata.sp=null;\ndata.evt=null;\n\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n    deviceName: deviceName,\n    deviceType: deviceType,\n//  assetName: assetName,\n//  assetType: assetType,\n//  customerName: customerName,\n//  groupName: groupName,\n    attributes: {\n        VIN: VIN,\n     },\n    telemetry: {\n        ts: ts,\n        values: {\n            latitude: latitude,\n            longitude: longitude,\n            ang: ang,\n            pr: pr,\n            alt: alt,\n            sat: sat,\n            sp: sp,\n            evt: evt,\n           \n            Ignition: Ignition,\n            Movement: Movement,\n            GSM_Signal: GSM_Signal,\n            Sleep_Mode: Sleep_Mode,\n            GNSS_Status: GNSS_Status,\n            Battery_Level: Battery_Level,\n            BT_Status: BT_Status,\n            GNSS_PDOP: GNSS_PDOP,\n            GNSS_HDOP: GNSS_HDOP,\n            External_Voltage: External_Voltage,\n            Speed: Speed,\n            Battery_Voltage: Battery_Voltage,\n            Battery_Current: Battery_Current,\n            Axis_X: Axis_X,\n            Axis_Y: Axis_Y,\n            Axis_Z: Axis_Z,\n            Active_GSM_Operator: Active_GSM_Operator,\n            Trip_Odometer: Trip_Odometer,\n            Total_Odometer: Total_Odometer,\n            Fuel_Used_GPS: Fuel_Used_GPS,\n            Fuel_Rate_GPS: Fuel_Rate_GPS,\n            Ignition_On_Counter: Ignition_On_Counter,\n            ICCID1: ICCID1,\n            ICCID2: ICCID2,\n            ISO6709_Coordinates: ISO6709_Coordinates,\n            Eco_Score: Eco_Score,\n            Green_driving_type: Green_driving_type,\n            Green_Driving_Value: Green_Driving_Value,\n            Engine_Load: Engine_Load,\n            Coolant_Temperature: Coolant_Temperature,\n            Intake_MAP: Intake_MAP,\n            Vehicle_Speed: Vehicle_Speed,\n            Throttle_Position: Throttle_Position,\n            Fuel_Level: Fuel_Level,\n            Barometic_Pressure: Barometic_Pressure,\n            Ambient_Air_Temperature: Ambient_Air_Temperature,\n            Engine_RPM: Engine_RPM,\n            MAF: MAF,\n            Runtime_since_engine_start: Runtime_since_engine_start,\n            Distance_Traveled_MIL_On: Distance_Traveled_MIL_On,\n            Distance_Since_Codes_Clear: Distance_Since_Codes_Clear,\n            Control_Module_Voltage: Control_Module_Voltage,\n            Ignition_Counter: Ignition_Counter,\n            \n            \n            \n            \n           \n            rawData: data\n       }\n   }\n};\n\n\n\n/** Helper functions 'decodeToString' and 'decodeToJson' are already built-in **/\n\nreturn result;",
      "encoder" : null,
      "tbelEncoder" : null
    },
    "debugMode" : true,
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "d297a2d0-271a-11ee-bb94-e90efb8ecc83"
    },
    "name" : "Teltonika",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}