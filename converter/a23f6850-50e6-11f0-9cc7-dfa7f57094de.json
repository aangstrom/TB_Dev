{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "scriptLang" : "TBEL",
      "decoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
      "tbelDecoder" : "// Decode an uplink message from a buffer\r\n// payload - array of bytes\r\n// metadata - key/value object\r\n\r\n/** Decoder **/\r\n\r\n// decode payload to JSON\r\nvar data = decodeToJson(payload);\r\n\r\n// Use the plcData object inside the JSON\r\nvar plc = data.plcData;\r\n\r\nvar deviceName = 'M5';\r\nvar deviceType = 'test';\r\n\r\nvar result = {\r\n   deviceName: deviceName,\r\n   deviceType: deviceType,\r\n   attributes: {},\r\n   telemetry: {\r\n      temperature: plc.temperature,\r\n      humidity: plc.humidity,\r\n      voc: plc.voc,\r\n      Interval: plc.Interval,\r\n      ventola: plc.ventola,\r\n      riscaldante: plc.riscaldante,\r\n      R: plc.colors.R,\r\n      G: plc.colors.G,\r\n      B: plc.colors.B\r\n   }\r\n};\r\n\r\nreturn result;",
      "encoder" : null,
      "tbelEncoder" : null,
      "updateOnlyKeys" : null
    },
    "converterVersion" : 1,
    "debugMode" : false,
    "debugSettings" : {
      "allEnabled" : false,
      "allEnabledUntil" : 1750762348644,
      "failuresEnabled" : false
    },
    "edgeTemplate" : false,
    "externalId" : {
      "entityType" : "CONVERTER",
      "id" : "a23f6850-50e6-11f0-9cc7-dfa7f57094de"
    },
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "a23f6850-50e6-11f0-9cc7-dfa7f57094de"
    },
    "integrationType" : null,
    "name" : "M5stack MQTT Uplink",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}