{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "scriptLang" : "TBEL",
      "decoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName']\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
      "tbelDecoder" : "/** Decoder **/\nvar Phase_A_power;\nvar Phase_B_power;\nvar Phase_C_power;\nvar Phase_A_pf;\nvar Phase_B_pf;\nvar Phase_C_pf;\nvar Phase_A_current;\nvar Phase_B_current;\nvar Phase_C_current;\nvar Phase_A_voltage;\nvar Phase_B_voltage;\nvar Phase_C_voltage;\nvar Phase_A_total;\nvar Phase_B_total;\nvar Phase_C_total;\nvar Phase_A_total_returned;\nvar Phase_B_total_returned;\nvar Phase_C_total_returned;\nvar Phase_A_energy;\nvar Phase_B_energy;\nvar Phase_C_energy;\nvar Phase_A_returned_energy;\nvar Phase_B_returned_energy;\nvar Phase_C_returned_energy;\nvar relay;\nvar deviceType;\nvar temperature;\nvar energy;\nvar power;\nvar variable;\nvar phaseSwitch;\nvar patterndw2tilt;\nvar patterndw2vibration;\nvar patterndw2temperature;\nvar patterndw2lux;\nvar patterndw2illumination;\nvar patterndw2battery;\nvar patterndw2error;\nvar patterndw2act_reasons;\nvar patterndw2state;\nvar tilt;\nvar vibration;\nvar lux;\nvar illumination;\nvar battery;\nvar error;\nvar act_reasons;\nvar state;\nvar IP_address;\nvar model;\n\nvar data=decodeToString(payload);\nvar device=metadata.topic.split(\"/\")[1];\nvar type=metadata.topic.split(\"/\")[2];\nvar deviceSwitch=device.split(\"-\")[0];\nvar patternplug=\"shellies/\"+device+\"/relay/0\";\nvar patternplugenergy=\"shellies/\"+device+\"/relay/0/energy\";\nvar patternplugpower=\"shellies/\"+device+\"/relay/0/power\";\nvar patternplugtemperature=\"shellies/\"+device+\"/temperature\";\nif(type==\"announce\"){\n    IP_address=decodeToJson(payload).ip;\n}\nif(deviceSwitch==\"shellyplug\"){\n    deviceType=\"AA Energy\";\n    model=\"Shellyplug-s\";\n    if(metadata.topic==patternplug){\n        if(data=='on'){\n            relay=true;\n        }else{\n            relay=false;\n        }\n    }else if(metadata.topic==patternplugpower){\n        power=data;\n    }else if(metadata.topic==patternplugenergy){\n        energy=data;\n    }else if(metadata.topic==patternplugtemperature){\n        temperature=data;\n    }\n} else if(deviceSwitch==\"shellydw2\"){\n    deviceType=\"Shellydw2\";\n    patterndw2tilt=\"shellies/\"+device+\"/sensor/tilt\";\n    patterndw2vibration=\"shellies/\"+device+\"/sensor/vibration\";\n    patterndw2temperature=\"shellies/\"+device+\"/sensor/temperature\";\n    patterndw2lux=\"shellies/\"+device+\"/sensor/lux\";\n    patterndw2illumination=\"shellies/\"+device+\"/sensor/illumination\";\n    patterndw2battery=\"shellies/\"+device+\"/sensor/battery\";\n    patterndw2error=\"shellies/\"+device+\"/sensor/error\";\n    patterndw2act_reasons=\"shellies/\"+device+\"/sensor/act_reasons\";\n    patterndw2state=\"shellies/\"+device+\"/sensor/state\";\n    if(metadata.topic==patterndw2tilt){\n        tilt=data;\n    }else if(metadata.topic==patterndw2vibration){\n        vibration=data;\n    }else if(metadata.topic==patterndw2temperature){\n        temperature=data;\n    }else if(metadata.topic==patterndw2lux){\n        lux=data;\n    }else if(metadata.topic==patterndw2illumination){\n        illumination=data;\n    }else if(metadata.topic==patterndw2battery){\n        battery=data;\n    }else if(metadata.topic==patterndw2error){\n        error=data;\n    }else if(metadata.topic==patterndw2act_reasons){\n        act_reasons=data;\n    }else if(metadata.topic==patterndw2state){\n        state=data;\n    }\n} else if(deviceSwitch==\"shellyem3\"){\n    phaseSwitch=metadata.topic.split(\"/\")[3];\n    variable=metadata.topic.split(\"/\")[4];\n    deviceType=\"AA Energy\";\n    model=\"shelly3em\";\n    if(type==\"emeter\"){\n        if(phaseSwitch==0){\n            if(variable==\"power\"){\n                Phase_A_power=data;\n            }else if(variable==\"pf\"){\n                Phase_A_pf=data;\n            }else if(variable==\"current\"){\n                Phase_A_current=data;\n            }else if(variable==\"voltage\"){\n                Phase_A_voltage=data;\n            }else if(variable==\"total\"){\n                Phase_A_total=data;\n            }else if(variable==\"total_returned\"){\n                Phase_A_total_returned=data;\n            }else if(variable==\"energy\"){\n                Phase_A_energy=data;\n            }else if(variable==\"returned_energy\"){\n                Phase_A_returned_energy=data;\n            }\n        }else if(phaseSwitch==1){\n            if(variable==\"power\"){\n                Phase_B_power=data;\n            }else if(variable==\"pf\"){\n                Phase_B_pf=data;\n            }else if(variable==\"current\"){\n                Phase_B_current=data;\n            }else if(variable==\"voltage\"){\n                Phase_B_voltage=data;\n            }else if(variable==\"total\"){\n                Phase_B_total=data;\n            }else if(variable==\"total_returned\"){\n                Phase_B_total_returned=data;\n            }else if(variable==\"energy\"){\n                Phase_B_energy=data;\n            }else if(variable==\"returned_energy\"){\n                Phase_B_returned_energy=data;\n            }\n        }else if(phaseSwitch==2){\n            if(variable==\"power\"){\n                Phase_C_power=data;\n            }else if(variable==\"pf\"){\n                Phase_C_pf=data;\n            }else if(variable==\"current\"){\n                Phase_C_current=data;\n            }else if(variable==\"voltage\"){\n                Phase_C_voltage=data;\n            }else if(variable==\"total\"){\n                Phase_C_total=data;\n            }else if(variable==\"total_returned\"){\n                Phase_C_total_returned=data;\n            }else if(variable==\"energy\"){\n                Phase_C_energy=data;\n            }else if(variable==\"returned_energy\"){\n                Phase_C_returned_energy=data;\n            }\n        }\n    }else if(type==\"relay\"){\n        if(data=='on'){\n            relay=true;\n        }else{\n            relay=false;\n        }\n    }\n}\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: device,\n   deviceType: deviceType,\n   attributes:{\n       Model: model,\n       IP_address: IP_address,\n       relay: relay\n   },\n   telemetry: {\n       Phase_A_power: parseFloat(Phase_A_power),\n       Phase_B_power: parseFloat(Phase_B_power),\n       Phase_C_power: parseFloat(Phase_C_power),\n       Phase_A_pf: parseFloat(Phase_A_pf),\n       Phase_B_pf: parseFloat(Phase_B_pf),\n       Phase_C_pf: parseFloat(Phase_C_pf),\n       Phase_A_voltage: parseFloat(Phase_A_voltage),\n       Phase_B_voltage: parseFloat(Phase_B_voltage),\n       Phase_C_voltage: parseFloat(Phase_C_voltage),\n       Phase_A_energy: parseFloat(Phase_A_energy),\n       Phase_B_energy: parseFloat(Phase_B_energy),\n       Phase_C_energy: parseFloat(Phase_C_energy),\n       /*Phase_A_current: Phase_A_current,\n       Phase_B_current: Phase_B_current,\n       Phase_C_current: Phase_C_current,\n       Phase_A_total: Phase_A_total,\n       Phase_B_total: Phase_B_total,\n       Phase_C_total: Phase_C_total,\n       Phase_A_total_returned: Phase_A_total_returned,\n       Phase_B_total_returned: Phase_B_total_returned,\n       Phase_C_total_returned: Phase_C_total_returned,\n       Phase_A_returned_energy: Phase_A_returned_energy,\n       Phase_B_returned_energy: Phase_B_returned_energy,\n       Phase_C_returned_energy: Phase_C_returned_energy,*/\n       power: parseFloat(power),\n       //energy: energy,\n       temperature: temperature,\n       relay: relay,\n       tilt: tilt,\n       vibration: vibration,\n       lux: lux,\n       //illumination: illumination,\n       battery: battery,\n       error: error,\n       //act_reasons: act_reasons,\n       state: state\n   }\n};\n\n/** Helper functions 'decodeToString' and 'decodeToJson' are already built-in **/\n\nreturn result;",
      "encoder" : null,
      "tbelEncoder" : null
    },
    "debugMode" : false,
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "37f87990-a87e-11ed-bcb8-7f48a6e846b2"
    },
    "name" : "Shelly",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}