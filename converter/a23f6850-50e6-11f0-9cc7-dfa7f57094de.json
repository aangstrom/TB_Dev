{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "scriptLang" : "TBEL",
      "decoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
      "tbelDecoder" : "// Parse JSON safely\nvar json = decodeToJson(payload);\nif (json == null) {\n  json = {};\n}\n\n// Telemetry object\nvar telemetry = {};\n\n// ---- ENV: temperature & humidity ----\nif (json.env != null) {\n  var env = json.env;\n  if (env.temperature != null) telemetry.temperature = env.temperature;\n  if (env.humidity    != null) telemetry.humidity    = env.humidity;\n}\n\n// ---- RELAYS: flattened relay1..relay16 ----\nif (json.relays != null) {\n  var r = json.relays;\n  var i = 1;\n  var MAX_RELAYS = 16;\n  while (i <= MAX_RELAYS) {\n    var key = \"\" + i;\n    if (r[key] != null) {\n      telemetry[\"relay\" + i] = r[key] * 1; // force number\n    }\n    i = i + 1;\n  }\n}\n\n// ---- COLOR: R/G/B (default to 0 only when color is present & field missing) ----\nif (json.colors != null) {\n  var c = json.colors;\n  telemetry.R = (c.R != null) ? c.R : 0;\n  telemetry.G = (c.G != null) ? c.G : 0;\n  telemetry.B = (c.B != null) ? c.B : 0;\n}\n\n// ---- TVOC ----\nif (json.voc != null) {\n  telemetry.voc = json.voc; // keep the same 'voc' key in telemetry as before\n}\n\n// ---- INTERVAL: ms -> seconds ----\nif (json.interval != null) {\n  telemetry.Interval = (json.interval * 1.0) / 1000.0;\n}\n\n// Attributes (empty for now)\nvar attributes = {};\n\nreturn {\n  deviceName: \"lab1 station2\",\n  deviceType: \"test\",\n  attributes: attributes,\n  telemetry: telemetry\n};",
      "encoder" : null,
      "tbelEncoder" : null,
      "updateOnlyKeys" : null
    },
    "converterVersion" : 1,
    "debugMode" : false,
    "debugSettings" : {
      "allEnabled" : false,
      "allEnabledUntil" : 1750762348644,
      "failuresEnabled" : false
    },
    "edgeTemplate" : false,
    "externalId" : {
      "entityType" : "CONVERTER",
      "id" : "a23f6850-50e6-11f0-9cc7-dfa7f57094de"
    },
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "a23f6850-50e6-11f0-9cc7-dfa7f57094de"
    },
    "integrationType" : null,
    "name" : "M5stack MQTT Uplink",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}