{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "scriptLang" : "TBEL",
      "decoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
      "tbelDecoder" : "var data = decodeToJson(payload);\r\nvar deviceName = \"eui-\"+data.deviceInfo.devEui;\r\nvar deviceType = \"sensor\";\r\nvar light;\r\nvar battery;\r\nvar latitude;\r\nvar longitude;\r\nvar status;\r\nvar sos;\r\nvar firmware;\r\nvar ts;\r\n\r\n\r\n//sensecap\r\nvar sensecap_array;\r\nif(data.object.messages!=null){\r\n    sensecap_array=data.object.messages[0];\r\n}\r\n\r\n/*temperature: data.uplink_message.decoded_payload.temperature,\r\nhumidity: data.uplink_message.decoded_payload.humidity,\r\nlight: light,\r\nmotion: data.uplink_message.decoded_payload.motion,\r\nsoundAvg: data.uplink_message.decoded_payload.soundAvg,\r\nsoundPeak: data.uplink_message.decoded_payload.soundPeak,\r\nvdd: data.uplink_message.decoded_payload.vdd,\r\npressEvent: data.uplink_message.decoded_payload.pressEvent,\r\nbatteryVoltage: data.uplink_message.decoded_payload.batteryVoltage,\r\nco2: data.uplink_message.decoded_payload.co2,\r\nformaldeide: data.uplink_message.decoded_payload.hcho,\r\npir: data.uplink_message.decoded_payload.pir,\r\noccupancy: data.uplink_message.decoded_payload.occupancy,\r\npm10: data.uplink_message.decoded_payload.pm10,\r\npm2_5: data.uplink_message.decoded_payload.pm2_5,\r\npressure: data.uplink_message.decoded_payload.pressure,\r\ntvoc: data.uplink_message.decoded_payload.tvoc,\r\nthermistorProperlyConnected: data.uplink_message.decoded_payload.thermistorProperlyConnected,\r\nwater: data.uplink_message.decoded_payload.water,\r\n*/\r\n/*\r\n//light\r\nif(data.uplink_message.decoded_payload.light!=null){\r\n    light=data.uplink_message.decoded_payload.light;\r\n}\r\nif(data.uplink_message.decoded_payload.light_level!=null){\r\n    light=data.uplink_message.decoded_payload.light_level;\r\n}\r\n//battery\r\nif(data.uplink_message.decoded_payload.battery!=null){\r\n    battery=data.uplink_message.decoded_payload.battery;\r\n}\r\n*/\r\nif(sensecap_array!=null){\r\n    for(var i = 0; i < sensecap_array.length; i++){\r\n        if(sensecap_array[i].type==\"Battery\"){\r\n            battery=sensecap_array[i].measurementValue;\r\n        }\r\n        if(sensecap_array[i].type==\"Latitude\"){\r\n            latitude=sensecap_array[i].measurementValue;\r\n        }\r\n        if(sensecap_array[i].type==\"Longitude\"){\r\n            longitude=sensecap_array[i].measurementValue;\r\n        }\r\n        if(sensecap_array[i].type==\"SOS Event\"){\r\n            sos=sensecap_array[i].measurementValue;\r\n        }\r\n        if(sensecap_array[i].type==\"Firmware Version\"){\r\n            firmware=sensecap_array[i].measurementValue;\r\n        }\r\n        if(sensecap_array[i].type==\"Timestamp\"){\r\n            ts=sensecap_array[i].measurementValue;\r\n        }\r\n    }\r\n}\r\nif(ts!=null){\r\n    var result = {\r\n        deviceName: deviceName,\r\n        deviceType: deviceType,\r\n        attributes: {\r\n            firmware: firmware,\r\n        },\r\n        telemetry: {\r\n            ts: ts,\r\n            values: {\r\n                battery: battery,\r\n                latitude: latitude,\r\n                longitude: longitude,\r\n                status: status,\r\n                sos: sos,\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nvar result = {\r\n    deviceName: deviceName,\r\n    deviceType: deviceType,\r\n    attributes: {\r\n        firmware: firmware,\r\n    },\r\n    telemetry: {\r\n        battery: battery,\r\n        latitude: latitude,\r\n        longitude: longitude,\r\n        status: status,\r\n        sos: sos,\r\n    }\r\n};\r\n\r\nfunction decodeToString(payload) {\r\n    return String.fromCharCode.apply(String, payload);\r\n}\r\n\r\nfunction decodeToJson(payload) {\r\n    var str = decodeToString(payload);\r\n    var data = JSON.parse(str);\r\n    return data;\r\n}\r\n\r\nreturn result;",
      "encoder" : null,
      "tbelEncoder" : null,
      "updateOnlyKeys" : [ "manufacturer" ]
    },
    "debugMode" : true,
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "a1f01060-be80-11ee-9101-d71950cabe39"
    },
    "name" : "Chirpstack Uplink",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}