{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "scriptLang" : "TBEL",
      "decoder" : null,
      "tbelDecoder" : "// Parse JSON safely\r\nvar json = decodeToJson(payload);\r\nif (json == null) {\r\n  json = {};\r\n}\r\n\r\n// Telemetry object\r\nvar telemetry = {};\r\n\r\n// ---- ENV: temperature & humidity ----\r\nif (json.env != null) {\r\n  var env = json.env;\r\n  if (env.temperature != null) telemetry.temperature = env.temperature;\r\n  if (env.humidity    != null) telemetry.humidity    = env.humidity;\r\n}\r\n\r\n// ---- RELAYS: flattened relay1..relay16 ----\r\nif (json.relays != null) {\r\n  var r = json.relays;\r\n  var i = 1;\r\n  var MAX_RELAYS = 16;\r\n  while (i <= MAX_RELAYS) {\r\n    var key = \"\" + i;\r\n    if (r[key] != null) {\r\n      telemetry[\"relay\" + i] = r[key] * 1; // force number\r\n    }\r\n    i = i + 1;\r\n  }\r\n}\r\n\r\n// ---- COLOR: R/G/B (default to 0 only when color is present & field missing) ----\r\nif (json.colors != null) {\r\n  var c = json.colors;\r\n  telemetry.R = (c.R != null) ? c.R : 0;\r\n  telemetry.G = (c.G != null) ? c.G : 0;\r\n  telemetry.B = (c.B != null) ? c.B : 0;\r\n}\r\n\r\n// ---- TVOC ----\r\nif (json.voc != null) {\r\n  telemetry.voc = json.voc; // keep the same 'voc' key in telemetry as before\r\n}\r\n\r\n// Attributes (we'll also persist Interval here)\r\nvar attributes = {};\r\n\r\n// ---- INTERVAL handling ----\r\n// Accept either json.interval in milliseconds OR json.Interval in seconds.\r\n// Write telemetry.Interval in seconds, and attributes.Interval (seconds) plus attributes.intervalMs (raw ms).\r\nvar hasIntervalMs = (json.interval != null);\r\nvar hasIntervalS  = (json.Interval != null);\r\n\r\nif (hasIntervalMs || hasIntervalS) {\r\n  var intervalSeconds;\r\n  var intervalMs;\r\n\r\n  if (hasIntervalMs) {\r\n    intervalMs = json.interval * 1.0;\r\n    intervalSeconds = intervalMs / 1000.0;\r\n  } else {\r\n    intervalSeconds = json.Interval * 1.0;\r\n    intervalMs = intervalSeconds * 1000.0;\r\n  }\r\n\r\n  telemetry.Interval = intervalSeconds;\r\n  attributes.Interval = intervalSeconds;  // useful to persist the setting on the device as an attribute\r\n  attributes.intervalMs = intervalMs;     // keep the raw ms around if you need it\r\n}\r\n\r\nreturn {\r\n  deviceName: \"lab1 station2\",\r\n  deviceType: \"test\",\r\n  attributes: attributes,\r\n  telemetry: telemetry\r\n};",
      "encoder" : null,
      "tbelEncoder" : null,
      "updateOnlyKeys" : null
    },
    "converterVersion" : 1,
    "debugMode" : false,
    "debugSettings" : {
      "allEnabled" : false,
      "allEnabledUntil" : 1756996735999,
      "failuresEnabled" : true
    },
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "ca453ef0-899a-11f0-bb0f-799059dff0f8"
    },
    "integrationType" : "MQTT",
    "name" : "lab1 station2 M5 MQTT integration",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}