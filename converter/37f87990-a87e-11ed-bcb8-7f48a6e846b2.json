{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "scriptLang" : "TBEL",
      "decoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName']\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
      "tbelDecoder" : "/** Decoder **/\nvar phase;\nvar Phase_A_power;\nvar Phase_B_power;\nvar Phase_C_power;\nvar Phase_A_pf;\nvar Phase_B_pf;\nvar Phase_C_pf;\nvar Phase_A_current;\nvar Phase_B_current;\nvar Phase_C_current;\nvar Phase_A_voltage;\nvar Phase_B_voltage;\nvar Phase_C_voltage;\nvar Phase_A_total;\nvar Phase_B_total;\nvar Phase_C_total;\nvar Phase_A_total_returned;\nvar Phase_B_total_returned;\nvar Phase_C_total_returned;\nvar Phase_A_energy;\nvar Phase_B_energy;\nvar Phase_C_energy;\nvar Phase_A_returned_energy;\nvar Phase_B_returned_energy;\nvar Phase_C_returned_energy;\nvar relay;\n\nvar data=decodeToString(payload);\nvar device=metadata.topic.split(\"/\")[1];\nvar deviceType=\"shelly3em\";\nvar type=metadata.topic.split(\"/\")[2];\nvar phaseSwitch=metadata.topic.split(\"/\")[3];\nif(phaseSwitch==0){\n    phase=\"Phase_A\";\n}else if(phaseSwitch==1){\n    phase=\"Phase_B\";\n}else if(phaseSwitch==2){\n    phase=\"Phase_C\";\n}\nvar variable=metadata.topic.split(\"/\")[4];\nif(type==\"emeter\"){\n    if(phaseSwitch==0){\n        if(variable==\"power\"){\n            Phase_A_power=data;\n        }else if(variable==\"pf\"){\n            Phase_A_pf=data;\n        }else if(variable==\"current\"){\n            Phase_A_current=data;\n        }else if(variable==\"voltage\"){\n            Phase_A_voltage=data;\n        }else if(variable==\"total\"){\n            Phase_A_total=data;\n        }else if(variable==\"total_returned\"){\n            Phase_A_total_returned=data;\n        }else if(variable==\"energy\"){\n            Phase_A_energy=data;\n        }else if(variable==\"returned_energy\"){\n            Phase_A_returned_energy=data;\n        }\n    }else if(phaseSwitch==1){\n        if(variable==\"power\"){\n            Phase_B_power=data;\n        }else if(variable==\"pf\"){\n            Phase_B_pf=data;\n        }else if(variable==\"current\"){\n            Phase_B_current=data;\n        }else if(variable==\"voltage\"){\n            Phase_B_voltage=data;\n        }else if(variable==\"total\"){\n            Phase_B_total=data;\n        }else if(variable==\"total_returned\"){\n            Phase_B_total_returned=data;\n        }else if(variable==\"energy\"){\n            Phase_B_energy=data;\n        }else if(variable==\"returned_energy\"){\n            Phase_B_returned_energy=data;\n        }\n    }else if(phaseSwitch==2){\n        if(variable==\"power\"){\n            Phase_C_power=data;\n        }else if(variable==\"pf\"){\n            Phase_C_pf=data;\n        }else if(variable==\"current\"){\n            Phase_C_current=data;\n        }else if(variable==\"voltage\"){\n            Phase_C_voltage=data;\n        }else if(variable==\"total\"){\n            Phase_C_total=data;\n        }else if(variable==\"total_returned\"){\n            Phase_C_total_returned=data;\n        }else if(variable==\"energy\"){\n            Phase_C_energy=data;\n        }else if(variable==\"returned_energy\"){\n            Phase_C_returned_energy=data;\n        }\n    }\n}else if(type==\"relay\"){\n    relay=data;\n}\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: device,\n   deviceType: deviceType,\n   telemetry: {\n       Phase_A_power: Phase_A_power,\n       Phase_B_power: Phase_B_power,\n       Phase_C_power: Phase_C_power,\n       Phase_A_pf: Phase_A_pf,\n       Phase_B_pf: Phase_B_pf,\n       Phase_C_pf: Phase_C_pf,\n       Phase_A_current: Phase_A_current,\n       Phase_B_current: Phase_B_current,\n       Phase_C_current: Phase_C_current,\n       Phase_A_voltage: Phase_A_voltage,\n       Phase_B_voltage: Phase_B_voltage,\n       Phase_C_voltage: Phase_C_voltage,\n       Phase_A_total: Phase_A_total,\n       Phase_B_total: Phase_B_total,\n       Phase_C_total: Phase_C_total,\n       Phase_A_total_returned: Phase_A_total_returned,\n       Phase_B_total_returned: Phase_B_total_returned,\n       Phase_C_total_returned: Phase_C_total_returned,\n       Phase_A_energy: Phase_A_energy,\n       Phase_B_energy: Phase_B_energy,\n       Phase_C_energy: Phase_C_energy,\n       Phase_A_returned_energy: Phase_A_returned_energy,\n       Phase_B_returned_energy: Phase_B_returned_energy,\n       Phase_C_returned_energy: Phase_C_returned_energy,\n       relay:relay,\n       variable: variable,\n       humidity: phaseSwitch,\n       rawData: type\n   }\n};\n\n/** Helper functions 'decodeToString' and 'decodeToJson' are already built-in **/\n\nreturn result;",
      "encoder" : null,
      "tbelEncoder" : null
    },
    "debugMode" : true,
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "37f87990-a87e-11ed-bcb8-7f48a6e846b2"
    },
    "name" : "Shelly",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}