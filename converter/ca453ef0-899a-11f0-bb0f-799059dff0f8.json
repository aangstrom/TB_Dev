{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "scriptLang" : "TBEL",
      "decoder" : null,
      "tbelDecoder" : "// Parse JSON safely\r\nvar json = decodeToJson(payload);\r\nif (json == null) {\r\n  json = {};\r\n}\r\n\r\n// Telemetry object\r\nvar telemetry = {};\r\n\r\n// ---- ENV: temperature & humidity ----\r\nif (json != null && json.env != null) {\r\n  var env = json.env;\r\n  // only assign when keys actually exist\r\n  if (env != null && (env.containsKey == null || env.containsKey(\"temperature\") || env.temperature != null)) {\r\n    if (env.temperature != null) telemetry.temperature = env.temperature * 1;\r\n  }\r\n  if (env != null && (env.containsKey == null || env.containsKey(\"humidity\") || env.humidity != null)) {\r\n    if (env.humidity != null) telemetry.humidity = env.humidity * 1;\r\n  }\r\n}\r\n\r\n// ---- RELAYS: flattened relay1..relay16 ----\r\nif (json != null && json.relays != null) {\r\n  var r = json.relays;\r\n  var i = 1;\r\n  var MAX_RELAYS = 16;\r\n  while (i <= MAX_RELAYS) {\r\n    var key = \"\" + i;\r\n    var hasKey = false;\r\n    if (r != null) {\r\n      if (r.containsKey != null) {\r\n        hasKey = r.containsKey(key);\r\n      } else {\r\n        // fallback: try direct access; treat undefined as missing\r\n        hasKey = (r[key] != null);\r\n      }\r\n    }\r\n    if (hasKey) {\r\n      var v = r[key];\r\n      // normalize booleans to 0/1; otherwise coerce to number\r\n      if (v === true) {\r\n        telemetry[\"relay\" + i] = 1;\r\n      } else if (v === false) {\r\n        telemetry[\"relay\" + i] = 0;\r\n      } else if (v != null) {\r\n        telemetry[\"relay\" + i] = v * 1;\r\n      }\r\n    }\r\n    i = i + 1;\r\n  }\r\n}\r\n\r\n// ---- COLOR: support {colors:{R,G,B}} or {color:{r,g,b}}\r\n// Default channels to 0 only if the color object is present\r\nvar colorObj = null;\r\nif (json != null) {\r\n  if (json.colors != null) colorObj = json.colors;\r\n  else if (json.color != null) colorObj = json.color;\r\n}\r\nif (colorObj != null) {\r\n  // Read both upper/lowercase keys\r\n  var hasR = (colorObj.containsKey != null) ? (colorObj.containsKey(\"R\") || colorObj.containsKey(\"r\"))\r\n                                            : (colorObj.R != null || colorObj.r != null);\r\n  var hasG = (colorObj.containsKey != null) ? (colorObj.containsKey(\"G\") || colorObj.containsKey(\"g\"))\r\n                                            : (colorObj.G != null || colorObj.g != null);\r\n  var hasB = (colorObj.containsKey != null) ? (colorObj.containsKey(\"B\") || colorObj.containsKey(\"b\"))\r\n                                            : (colorObj.B != null || colorObj.b != null);\r\n\r\n  var valR = (colorObj.R != null) ? colorObj.R : colorObj.r;\r\n  var valG = (colorObj.G != null) ? colorObj.G : colorObj.g;\r\n  var valB = (colorObj.B != null) ? colorObj.B : colorObj.b;\r\n\r\n  telemetry.R = hasR && valR != null ? (valR * 1) : 0;\r\n  telemetry.G = hasG && valG != null ? (valG * 1) : 0;\r\n  telemetry.B = hasB && valB != null ? (valB * 1) : 0;\r\n}\r\n\r\n// ---- TVOC: keep legacy 'voc'; also accept {gas:{tvoc}} ----\r\nif (json != null) {\r\n  if (json.voc != null) {\r\n    telemetry.voc = json.voc * 1;\r\n  } else if (json.gas != null && json.gas.tvoc != null) {\r\n    telemetry.voc = json.gas.tvoc * 1;\r\n  }\r\n}\r\n\r\n// Attributes (we'll also persist Interval here)\r\nvar attributes = {};\r\n\r\n// ---- INTERVAL handling ----\r\n// Accept either json.interval in milliseconds OR json.Interval in seconds.\r\n// Write telemetry.Interval in seconds; also persist in attributes.\r\nvar hasIntervalMs = (json != null && json.interval != null);\r\nvar hasIntervalS  = (json != null && json.Interval != null);\r\n\r\nif (hasIntervalMs || hasIntervalS) {\r\n  var intervalSeconds;\r\n  var intervalMs;\r\n\r\n  if (hasIntervalMs) {\r\n    intervalMs = json.interval * 1.0;\r\n    intervalSeconds = intervalMs / 1000.0;\r\n  } else {\r\n    intervalSeconds = json.Interval * 1.0;\r\n    intervalMs = intervalSeconds * 1000.0;\r\n  }\r\n\r\n  telemetry.Interval = intervalSeconds;\r\n  attributes.Interval = intervalSeconds;\r\n  attributes.intervalMs = intervalMs;\r\n}\r\n\r\nreturn {\r\n  deviceName: \"lab1 station2\",\r\n  deviceType: \"test\",\r\n  attributes: attributes,\r\n  telemetry: telemetry\r\n};",
      "encoder" : null,
      "tbelEncoder" : null,
      "updateOnlyKeys" : null
    },
    "converterVersion" : 1,
    "debugMode" : false,
    "debugSettings" : {
      "allEnabled" : false,
      "allEnabledUntil" : 1756996735999,
      "failuresEnabled" : true
    },
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "ca453ef0-899a-11f0-bb0f-799059dff0f8"
    },
    "integrationType" : "MQTT",
    "name" : "lab1 station2 M5 MQTT integration",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}