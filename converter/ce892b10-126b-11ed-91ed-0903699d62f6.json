{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "scriptLang" : "TBEL",
      "decoder" : "var data = decodeToJson(payload);\r\nvar deviceName = data.end_device_ids.device_id;\r\nvar deviceType = data.end_device_ids.application_ids.application_id;\r\n\r\nvar result = {\r\n    deviceName: deviceName,\r\n    deviceType: deviceType,\r\n    telemetry: {\r\n         temperature: data.uplink_message.decoded_payload.temperature,\r\n         humidity: data.uplink_message.decoded_payload.humidity,\r\n         light: data.uplink_message.decoded_payload.light,\r\n         motion: data.uplink_message.decoded_payload.motion,\r\n         soundAvg: data.uplink_message.decoded_payload.soundAvg,\r\n         soundPeak: data.uplink_message.decoded_payload.soundPeak,\r\n         vdd: data.uplink_message.decoded_payload.vdd,\r\n         pressEvent: data.uplink_message.decoded_payload.pressEvent,\r\n         batteryVoltage: data.uplink_message.decoded_payload.batteryVoltage,\r\n         thermistorProperlyConnected: data.uplink_message.decoded_payload.thermistorProperlyConnected,\r\n         dev_latitude: data.uplink_message.rx_metadata[0].location.latitude,\r\n         dev_longitude: data.uplink_message.rx_metadata[0].location.longitude\r\n    }\r\n};\r\n\r\nfunction decodeToString(payload) {\r\n    return String.fromCharCode.apply(String, payload);\r\n}\r\n\r\nfunction decodeToJson(payload) {\r\n    var str = decodeToString(payload);\r\n    var data = JSON.parse(str);\r\n    return data;\r\n}\r\n\r\nreturn result;",
      "tbelDecoder" : "var data = decodeToJson(payload);\r\nvar deviceName = data.end_device_ids.device_id;\r\nvar deviceType = \"sensor\";\r\nvar light;\r\nvar battery;\r\n\r\nvar sensecap_array=data.uplink_message.decoded_payload.messages[0];\r\n\r\n//light\r\nif(data.uplink_message.decoded_payload.light!=null){\r\n    light=data.uplink_message.decoded_payload.light;\r\n}\r\nif(data.uplink_message.decoded_payload.light_level!=null){\r\n    light=data.uplink_message.decoded_payload.light_level;\r\n}\r\n//battery\r\nif(data.uplink_message.decoded_payload.battery!=null){\r\n    battery=data.uplink_message.decoded_payload.battery;\r\n}\r\n\r\n//sensecap\r\nvar sensecap_array=data.uplink_message.decoded_payload.messages[0];\r\nvar latitude;\r\nvar longitude;\r\nvar status;\r\nvar sos;\r\nvar firmware;\r\nvar ts;\r\n/*\r\nbattery: battery,\r\nlatitude: sensecap_array[2].measurementValue,\r\nlongitude: sensecap_array[1].measurementValue,\r\nstatus: sensecap_array[0].measurementValue,\r\n*/\r\nif(sensecap_array!=null){\r\n    for(var i = 0; i < sensecap_array.length; i++){\r\n        if(sensecap_array[i].type==\"Battery\"){\r\n            battery=sensecap_array[i].measurementValue;\r\n        }\r\n        if(sensecap_array[i].type==\"Latitude\"){\r\n            latitude=sensecap_array[i].measurementValue;\r\n        }\r\n        if(sensecap_array[i].type==\"Longitude\"){\r\n            longitude=sensecap_array[i].measurementValue;\r\n        }\r\n        if(sensecap_array[i].type==\"SOS Event\"){\r\n            sos=sensecap_array[i].measurementValue;\r\n        }\r\n        if(sensecap_array[i].type==\"Firmware Version\"){\r\n            firmware=sensecap_array[i].measurementValue;\r\n        }\r\n        if(sensecap_array[i].type==\"Timestamp\"){\r\n            ts=sensecap_array[i].measurementValue;\r\n        }\r\n    }\r\n}\r\n\r\nvar result = {\r\n    deviceName: deviceName,\r\n    deviceType: deviceType,\r\n    attributes: {\r\n        firmware: firmware,\r\n    },\r\n    telemetry: {\r\n        ts: ts,\r\n        values: {\r\n            temperature: data.uplink_message.decoded_payload.temperature,\r\n            humidity: data.uplink_message.decoded_payload.humidity,\r\n            light: light,\r\n            motion: data.uplink_message.decoded_payload.motion,\r\n            soundAvg: data.uplink_message.decoded_payload.soundAvg,\r\n            soundPeak: data.uplink_message.decoded_payload.soundPeak,\r\n            vdd: data.uplink_message.decoded_payload.vdd,\r\n            pressEvent: data.uplink_message.decoded_payload.pressEvent,\r\n            batteryVoltage: data.uplink_message.decoded_payload.batteryVoltage,\r\n            co2: data.uplink_message.decoded_payload.co2,\r\n            formaldeide: data.uplink_message.decoded_payload.hcho,\r\n            pir: data.uplink_message.decoded_payload.pir,\r\n            occupancy: data.uplink_message.decoded_payload.occupancy,\r\n            pm10: data.uplink_message.decoded_payload.pm10,\r\n            pm2_5: data.uplink_message.decoded_payload.pm2_5,\r\n            pressure: data.uplink_message.decoded_payload.pressure,\r\n            tvoc: data.uplink_message.decoded_payload.tvoc,\r\n            thermistorProperlyConnected: data.uplink_message.decoded_payload.thermistorProperlyConnected,\r\n            water: data.uplink_message.decoded_payload.water,\r\n            battery: battery,\r\n            latitude: latitude,\r\n            longitude: longitude,\r\n            status: status,\r\n            sos: sos,\r\n        }\r\n    }\r\n};\r\n\r\nfunction decodeToString(payload) {\r\n    return String.fromCharCode.apply(String, payload);\r\n}\r\n\r\nfunction decodeToJson(payload) {\r\n    var str = decodeToString(payload);\r\n    var data = JSON.parse(str);\r\n    return data;\r\n}\r\n\r\nreturn result;",
      "encoder" : null
    },
    "debugMode" : false,
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "ce892b10-126b-11ed-91ed-0903699d62f6"
    },
    "name" : "ttn_uplink_converter",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}