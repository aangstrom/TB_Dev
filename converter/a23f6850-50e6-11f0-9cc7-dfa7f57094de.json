{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "scriptLang" : "TBEL",
      "decoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
      "tbelDecoder" : "function decoder(payload, metadata) {\r\n  // Parse JSON safely\r\n  var json = decodeToJson(payload);\r\n  var plc = (json != null && json.plcData != null) ? json.plcData : {};\r\n  var colors = (plc.colors != null) ? plc.colors : {};\r\n\r\n  // Telemetry\r\n  var telemetry = {};\r\n\r\n  // Core sensor data (null-safe)\r\n  telemetry.temperature = plc.temperature;   // may be null\r\n  telemetry.humidity    = plc.humidity;      // may be null\r\n\r\n  // RGB defaults to 0 if missing\r\n  telemetry.R = (colors.R != null) ? colors.R : 0;\r\n  telemetry.G = (colors.G != null) ? colors.G : 0;\r\n  telemetry.B = (colors.B != null) ? colors.B : 0;\r\n\r\n  // Interval: ms -> seconds (only if present)\r\n  if (plc.Interval != null) {\r\n    telemetry.Interval = (plc.Interval * 1.0) / 1000.0;\r\n  }\r\n\r\n  // Optional fields: include only when present\r\n  if (plc.voc != null) {\r\n    telemetry.voc = plc.voc;                // TVOC (ppb)\r\n  }\r\n  if (plc.ventola != null) {\r\n    telemetry.ventola = plc.ventola;\r\n  }\r\n  if (plc.riscaldante != null) {\r\n    telemetry.riscaldante = plc.riscaldante;\r\n  }\r\n\r\n  // Attributes (empty for now)\r\n  var attributes = {};\r\n\r\n  return {\r\n    deviceName: \"M5\",\r\n    deviceType: \"test\",\r\n    attributes: attributes,\r\n    telemetry: telemetry\r\n  };\r\n}\r\n\r\n// IMPORTANT: actually invoke the function so the script returns an object\r\ndecoder(payload, metadata);",
      "encoder" : null,
      "tbelEncoder" : null,
      "updateOnlyKeys" : null
    },
    "converterVersion" : 1,
    "debugMode" : false,
    "debugSettings" : {
      "allEnabled" : false,
      "allEnabledUntil" : 1750762348644,
      "failuresEnabled" : false
    },
    "edgeTemplate" : false,
    "externalId" : {
      "entityType" : "CONVERTER",
      "id" : "a23f6850-50e6-11f0-9cc7-dfa7f57094de"
    },
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "a23f6850-50e6-11f0-9cc7-dfa7f57094de"
    },
    "integrationType" : null,
    "name" : "M5stack MQTT Uplink",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}