{
  "entityType" : "DASHBOARD",
  "entity" : {
    "assignedCustomers" : null,
    "configuration" : {
      "description" : "",
      "widgets" : {
        "9d0fe424-5a78-1c37-0723-ae33b713ba2a" : {
          "isSystemType" : true,
          "bundleAlias" : "cards",
          "typeAlias" : "html_card",
          "type" : "static",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ ],
            "timewindow" : {
              "realtime" : {
                "timewindowMs" : 60000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<div id=\"my-div\" align=\"center\" onload=\"LoadOnce\">\r\n  <iframe width=\"1080\" height=\"1080\"\r\nsrc=\"https://cam.aangstrom.it/api/banco_salumi?bbox=1&amp;\">\r\n</iframe>\r\n</div>\r\n\r\n<script>\r\n\r\nwindow.onload = refresh()\r\nfunction LoadOnce() \r\n{ \r\nwindow.location.reload();\r\n\r\n\r\n\r\n} \r\n\r\n\t</script>",
              "cardCss" : ".card {\n    font-weight: bold;\n    font-size: 32px;\n    color: #999;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}"
            },
            "title" : "New HTML Card",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "enableDataExport" : true,
            "widgetStyle" : { },
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "showLegend" : false,
            "actions" : {
              "headerButton" : [ {
                "name" : "refresh",
                "icon" : "refresh",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<!--=======================================================================-->\n<!--=====  There are two example templates: for edit and add entity   =====-->\n<!--=======================================================================-->\n<!--========================  Edit entity example  ========================-->\n<!--=======================================================================-->\n<!-- -->\n<!--<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"-->\n<!--      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">-->\n<!--    <mat-toolbar fxLayout=\"row\" color=\"primary\">-->\n<!--        <h2>Edit {{entityType.toLowerCase()}} {{entityName}}</h2>-->\n<!--        <span fxFlex></span>-->\n<!--        <button mat-icon-button (click)=\"cancel()\" type=\"button\">-->\n<!--            <mat-icon class=\"material-icons\">close</mat-icon>-->\n<!--        </button>-->\n<!--    </mat-toolbar>-->\n<!--    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">-->\n<!--    </mat-progress-bar>-->\n<!--    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>-->\n<!--    <div mat-dialog-content fxLayout=\"column\">-->\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Name</mat-label>-->\n<!--                <input matInput formControlName=\"entityName\" required readonly=\"\">-->\n<!--            </mat-form-field>-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Label</mat-label>-->\n<!--                <input matInput formControlName=\"entityLabel\">-->\n<!--            </mat-form-field>-->\n<!--        </div>-->\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Type</mat-label>-->\n<!--                <input matInput formControlName=\"entityType\" readonly>-->\n<!--            </mat-form-field>-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Type</mat-label>-->\n<!--                <input matInput formControlName=\"type\" readonly>-->\n<!--            </mat-form-field>-->\n<!--        </div>-->\n<!--        <div formGroupName=\"attributes\" fxLayout=\"column\">-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Latitude</mat-label>-->\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"latitude\">-->\n<!--                </mat-form-field>-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Longitude</mat-label>-->\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"longitude\">-->\n<!--                </mat-form-field>-->\n<!--            </div>-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Address</mat-label>-->\n<!--                    <input matInput formControlName=\"address\">-->\n<!--                </mat-form-field>-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Owner</mat-label>-->\n<!--                    <input matInput formControlName=\"owner\">-->\n<!--                </mat-form-field>-->\n<!--            </div>-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Integer Value</mat-label>-->\n<!--                    <input type=\"number\" step=\"1\" matInput formControlName=\"number\">-->\n<!--                    <mat-error *ngIf=\"editEntityFormGroup.get('attributes.number').hasError('pattern')\">-->\n<!--                        Invalid integer value.-->\n<!--                    </mat-error>-->\n<!--                </mat-form-field>-->\n<!--                <div class=\"boolean-value-input\" fxLayout=\"column\" fxLayoutAlign=\"center start\" fxFlex>-->\n<!--                    <label class=\"checkbox-label\">Boolean Value</label>-->\n<!--                    <mat-checkbox formControlName=\"booleanValue\" style=\"margin-bottom: 40px;\">-->\n<!--                        {{ (editEntityFormGroup.get('attributes.booleanValue').value ? \"value.true\" : \"value.false\") | translate }}-->\n<!--                    </mat-checkbox>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--        <div class=\"relations-list old-relations\">-->\n<!--            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>-->\n<!--            <div class=\"body\" [fxShow]=\"oldRelations().length\">-->\n<!--                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"oldRelations\" -->\n<!--                     *ngFor=\"let relation of oldRelations().controls; let i = index;\">-->\n<!--                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">-->\n<!--                        <div fxFlex fxLayout=\"column\">-->\n<!--                            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">-->\n<!--                                    <mat-label>Direction</mat-label>-->\n<!--                                    <mat-select formControlName=\"direction\" name=\"direction\">-->\n<!--                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">-->\n<!--                                            {{ (\"relation.search-direction.\" + direction.value) | translate}}-->\n<!--                                        </mat-option>-->\n<!--                                    </mat-select>-->\n<!--                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">-->\n<!--                                        Relation direction is required.-->\n<!--                                    </mat-error>-->\n<!--                                </mat-form-field>-->\n<!--                                <tb-relation-type-autocomplete-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        formControlName=\"relationType\"-->\n<!--                                        required=\"true\">-->\n<!--                                </tb-relation-type-autocomplete>-->\n<!--                            </div>-->\n<!--                            <div fxLayout=\"row\" fxLayout.xs=\"column\">-->\n<!--                                <tb-entity-select-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        required=\"true\"-->\n<!--                                        formControlName=\"relatedEntity\">-->\n<!--                                </tb-entity-select>-->\n<!--                            </div>-->\n<!--                        </div>-->\n<!--                        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">-->\n<!--                            <button mat-icon-button color=\"primary\"-->\n<!--                                    aria-label=\"Remove\"-->\n<!--                                    type=\"button\"-->\n<!--                                    (click)=\"removeOldRelation(i)\"-->\n<!--                                    matTooltip=\"Remove relation\"-->\n<!--                                    matTooltipPosition=\"above\">-->\n<!--                                <mat-icon>close</mat-icon>-->\n<!--                            </button>-->\n<!--                        </div>-->\n<!--                    </div>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--        <div class=\"relations-list\">-->\n<!--            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">New Relations</div>-->\n<!--            <div class=\"body\" [fxShow]=\"relations().length\">-->\n<!--                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"relations\" *ngFor=\"let relation of relations().controls; let i = index;\">-->\n<!--                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">-->\n<!--                        <div fxFlex fxLayout=\"column\">-->\n<!--                            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">-->\n<!--                                    <mat-label>Direction</mat-label>-->\n<!--                                    <mat-select formControlName=\"direction\" name=\"direction\">-->\n<!--                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">-->\n<!--                                            {{ (\"relation.search-direction.\" + direction.value) | translate}}-->\n<!--                                        </mat-option>-->\n<!--                                    </mat-select>-->\n<!--                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">-->\n<!--                                        Relation direction is required.-->\n<!--                                    </mat-error>-->\n<!--                                </mat-form-field>-->\n<!--                                <tb-relation-type-autocomplete-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        formControlName=\"relationType\"-->\n<!--                                        [required]=\"true\">-->\n<!--                                </tb-relation-type-autocomplete>-->\n<!--                            </div>-->\n<!--                            <div fxLayout=\"row\" fxLayout.xs=\"column\">-->\n<!--                                <tb-entity-select-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        [required]=\"true\"-->\n<!--                                        formControlName=\"relatedEntity\">-->\n<!--                                </tb-entity-select>-->\n<!--                            </div>-->\n<!--                        </div>-->\n<!--                        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">-->\n<!--                            <button mat-icon-button color=\"primary\"-->\n<!--                                    aria-label=\"Remove\"-->\n<!--                                    type=\"button\"-->\n<!--                                    (click)=\"removeRelation(i)\"-->\n<!--                                    matTooltip=\"Remove relation\"-->\n<!--                                    matTooltipPosition=\"above\">-->\n<!--                                <mat-icon>close</mat-icon>-->\n<!--                            </button>-->\n<!--                        </div>-->\n<!--                    </div>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--            <div>-->\n<!--                <button mat-raised-button color=\"primary\"-->\n<!--                        type=\"button\"-->\n<!--                        (click)=\"addRelation()\"-->\n<!--                        matTooltip=\"Add Relation\"-->\n<!--                        matTooltipPosition=\"above\">-->\n<!--                    Add-->\n<!--                </button>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--    </div>-->\n<!--    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">-->\n<!--        <button mat-button color=\"primary\"-->\n<!--                type=\"button\"-->\n<!--                [disabled]=\"(isLoading$ | async)\"-->\n<!--                (click)=\"cancel()\" cdkFocusInitial>-->\n<!--            Cancel-->\n<!--        </button>-->\n<!--        <button mat-button mat-raised-button color=\"primary\"-->\n<!--                type=\"submit\"-->\n<!--                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">-->\n<!--            Save-->\n<!--        </button>-->\n<!--    </div>-->\n<!--</form>-->\n<!---->\n<!--========================================================================-->\n<!--=========================  Add entity example  =========================-->\n<!--========================================================================-->\n<!---->\n<!--<form #addEntityForm=\"ngForm\" [formGroup]=\"addEntityFormGroup\"-->\n<!--      (ngSubmit)=\"save()\" class=\"add-entity-form\">-->\n<!--    <mat-toolbar fxLayout=\"row\" color=\"primary\">-->\n<!--        <h2>Add entity</h2>-->\n<!--        <span fxFlex></span>-->\n<!--        <button mat-icon-button (click)=\"cancel()\" type=\"button\">-->\n<!--            <mat-icon class=\"material-icons\">close</mat-icon>-->\n<!--        </button>-->\n<!--    </mat-toolbar>-->\n<!--    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">-->\n<!--    </mat-progress-bar>-->\n<!--    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>-->\n<!--    <div mat-dialog-content fxLayout=\"column\">-->\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Name</mat-label>-->\n<!--                <input matInput formControlName=\"entityName\" required>-->\n<!--                <mat-error *ngIf=\"addEntityFormGroup.get('entityName').hasError('required')\">-->\n<!--                    Entity name is required.-->\n<!--                </mat-error>-->\n<!--            </mat-form-field>-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Label</mat-label>-->\n<!--                <input matInput formControlName=\"entityLabel\" >-->\n<!--            </mat-form-field>-->\n<!--        </div>-->\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--            <tb-entity-type-select-->\n<!--                    class=\"mat-block\"-->\n<!--                    formControlName=\"entityType\"-->\n<!--                    [showLabel]=\"true\"-->\n<!--                    [allowedEntityTypes]=\"allowedEntityTypes\"-->\n<!--            ></tb-entity-type-select>-->\n<!--            <tb-entity-subtype-autocomplete-->\n<!--                    fxFlex *ngIf=\"addEntityFormGroup.get('entityType').value == 'ASSET'\"-->\n<!--                    class=\"mat-block\"-->\n<!--                    formControlName=\"type\"-->\n<!--                    [required]=\"true\"-->\n<!--                    [entityType]=\"'ASSET'\"-->\n<!--            ></tb-entity-subtype-autocomplete>-->\n<!--            <tb-entity-subtype-autocomplete-->\n<!--                    fxFlex *ngIf=\"addEntityFormGroup.get('entityType').value != 'ASSET'\"-->\n<!--                    class=\"mat-block\"-->\n<!--                    formControlName=\"type\"-->\n<!--                    [required]=\"true\"-->\n<!--                    [entityType]=\"'DEVICE'\"-->\n<!--            ></tb-entity-subtype-autocomplete>-->\n<!--        </div>-->\n<!--        <div formGroupName=\"attributes\" fxLayout=\"column\">-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Latitude</mat-label>-->\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"latitude\">-->\n<!--                </mat-form-field>-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Longitude</mat-label>-->\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"longitude\">-->\n<!--                </mat-form-field>-->\n<!--            </div>-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Address</mat-label>-->\n<!--                    <input matInput formControlName=\"address\">-->\n<!--                </mat-form-field>-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Owner</mat-label>-->\n<!--                    <input matInput formControlName=\"owner\">-->\n<!--                </mat-form-field>-->\n<!--            </div>-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Integer Value</mat-label>-->\n<!--                    <input type=\"number\" step=\"1\" matInput formControlName=\"number\">-->\n<!--                    <mat-error *ngIf=\"addEntityFormGroup.get('attributes.number').hasError('pattern')\">-->\n<!--                        Invalid integer value.-->\n<!--                    </mat-error>-->\n<!--                </mat-form-field>-->\n<!--                <div class=\"boolean-value-input\" fxLayout=\"column\" fxLayoutAlign=\"center start\" fxFlex>-->\n<!--                    <label class=\"checkbox-label\">Boolean Value</label>-->\n<!--                    <mat-checkbox formControlName=\"booleanValue\" style=\"margin-bottom: 40px;\">-->\n<!--                        {{ (addEntityFormGroup.get('attributes.booleanValue').value ? \"value.true\" : \"value.false\") | translate }}-->\n<!--                    </mat-checkbox>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--        <div class=\"relations-list\">-->\n<!--            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>-->\n<!--            <div class=\"body\" [fxShow]=\"relations().length\">-->\n<!--                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"relations\" *ngFor=\"let relation of relations().controls; let i = index;\">-->\n<!--                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">-->\n<!--                        <div fxFlex fxLayout=\"column\">-->\n<!--                            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">-->\n<!--                                    <mat-label>Direction</mat-label>-->\n<!--                                    <mat-select formControlName=\"direction\" name=\"direction\">-->\n<!--                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">-->\n<!--                                            {{ (\"relation.search-direction.\" + direction.value) | translate}}-->\n<!--                                        </mat-option>-->\n<!--                                    </mat-select>-->\n<!--                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">-->\n<!--                                        Relation direction is required.-->\n<!--                                    </mat-error>-->\n<!--                                </mat-form-field>-->\n<!--                                <tb-relation-type-autocomplete-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        formControlName=\"relationType\"-->\n<!--                                        [required]=\"true\">-->\n<!--                                </tb-relation-type-autocomplete>-->\n<!--                            </div>-->\n<!--                            <div fxLayout=\"row\" fxLayout.xs=\"column\">-->\n<!--                                <tb-entity-select-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        [required]=\"true\"-->\n<!--                                        formControlName=\"relatedEntity\">-->\n<!--                                </tb-entity-select>-->\n<!--                            </div>-->\n<!--                        </div>-->\n<!--                        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">-->\n<!--                            <button mat-icon-button color=\"primary\"-->\n<!--                                    aria-label=\"Remove\"-->\n<!--                                    type=\"button\"-->\n<!--                                    (click)=\"removeRelation(i)\"-->\n<!--                                    matTooltip=\"Remove relation\"-->\n<!--                                    matTooltipPosition=\"above\">-->\n<!--                                <mat-icon>close</mat-icon>-->\n<!--                            </button>-->\n<!--                        </div>-->\n<!--                    </div>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--            <div>-->\n<!--                <button mat-raised-button color=\"primary\"-->\n<!--                        type=\"button\"-->\n<!--                        (click)=\"addRelation()\"-->\n<!--                        matTooltip=\"Add Relation\"-->\n<!--                        matTooltipPosition=\"above\">-->\n<!--                    Add-->\n<!--                </button>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--    </div>-->\n<!--    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">-->\n<!--        <button mat-button color=\"primary\"-->\n<!--                type=\"button\"-->\n<!--                [disabled]=\"(isLoading$ | async)\"-->\n<!--                (click)=\"cancel()\" cdkFocusInitial>-->\n<!--            Cancel-->\n<!--        </button>-->\n<!--        <button mat-button mat-raised-button color=\"primary\"-->\n<!--                type=\"submit\"-->\n<!--                [disabled]=\"(isLoading$ | async) || addEntityForm.invalid || !addEntityForm.dirty\">-->\n<!--            Create-->\n<!--        </button>-->\n<!--    </div>-->\n<!--</form>-->\n",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "/*=======================================================================*/\n/*=====  There are three examples: for delete, edit and add entity  =====*/\n/*=======================================================================*/\n/*=======================  Delete entity example  =======================*/\n/*=======================================================================*/\n//\n//let $injector = widgetContext.$scope.$injector;\n//let dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\n//let assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n//let deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n//\n//openDeleteEntityDialog();\n//\n//function openDeleteEntityDialog() {\n//    let title = 'Delete ' + entityId.entityType.toLowerCase() + ' ' +\n//                 entityName;\n//    let content = 'Are you sure you want to delete the ' +\n//                  entityId.entityType.toLowerCase() + ' ' + entityName + '?';\n//    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n//        function(result) {\n//            if (result) {\n//                deleteEntity();\n//            }\n//        }\n//    );\n//}\n//\n//function deleteEntity() {\n//    deleteEntityObservable(entityId).subscribe(\n//        function success() {\n//            widgetContext.updateAliases();\n//        },\n//        function fail() {\n//            showErrorDialog();\n//        }\n//    );\n//}\n//\n//function deleteEntityObservable(entityId) {\n//    if (entityId.entityType == \"ASSET\") {\n//        return assetService.deleteAsset(entityId.id);\n//    } else if (entityId.entityType == \"DEVICE\") {\n//        return deviceService.deleteDevice(entityId.id);\n//    }\n//}\n//\n//function showErrorDialog() {\n//    let title = 'Error';\n//    let content = 'An error occurred while deleting the entity. Please try again.';\n//    dialogs.alert(title, content, 'CLOSE').subscribe(\n//        function(result) {}\n//    );\n//}\n//\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n//\n//let $injector = widgetContext.$scope.$injector;\n//let customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\n//let entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\n//let assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n//let deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n//let attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n//let entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n//\n//openEditEntityDialog();\n//\n//function openEditEntityDialog() {\n//    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n//}\n//\n//function EditEntityDialogController(instance) {\n//    let vm = instance;\n//\n//    vm.entityName = entityName;\n//    vm.entityType = entityId.entityType;\n//    vm.entitySearchDirection = {\n//        from: \"FROM\",\n//        to: \"TO\"\n//    };\n//    vm.attributes = {};\n//    vm.oldRelationsData = [];\n//    vm.relationsToDelete = [];\n//    vm.entity = {};\n//\n//    vm.editEntityFormGroup = vm.fb.group({\n//        entityName: ['', [vm.validators.required]],\n//        entityType: [null],\n//        entityLabel: [null],\n//        type: ['', [vm.validators.required]],\n//        attributes: vm.fb.group({\n//            latitude: [null],\n//            longitude: [null],\n//            address: [null],\n//            owner: [null],\n//            number: [null, [vm.validators.pattern(/^-?[0-9]+$/)]],\n//            booleanValue: [false]\n//        }),\n//        oldRelations: vm.fb.array([]),\n//        relations: vm.fb.array([])\n//    });\n//\n//    getEntityInfo();\n//\n//    vm.cancel = function() {\n//        vm.dialogRef.close(null);\n//    };\n//\n//    vm.relations = function() {\n//        return vm.editEntityFormGroup.get('relations');\n//    };\n//\n//    vm.oldRelations = function() {\n//        return vm.editEntityFormGroup.get('oldRelations');\n//    };\n//\n//    vm.addRelation = function() {\n//        vm.relations().push(vm.fb.group({\n//            relatedEntity: [null, [vm.validators.required]],\n//            relationType: [null, [vm.validators.required]],\n//            direction: [null, [vm.validators.required]]\n//        }));\n//    };\n//\n//    function addOldRelation() {\n//        vm.oldRelations().push(vm.fb.group({\n//            relatedEntity: [{value: null, disabled: true}, [vm.validators.required]],\n//            relationType: [{value: null, disabled: true}, [vm.validators.required]],\n//            direction: [{value: null, disabled: true}, [vm.validators.required]]\n//        }));\n//    }\n//\n//    vm.removeRelation = function(index) {\n//        vm.relations().removeAt(index);\n//        vm.relations().markAsDirty();\n//    };\n//\n//    vm.removeOldRelation = function(index) {\n//        vm.oldRelations().removeAt(index);\n//        vm.relationsToDelete.push(vm.oldRelationsData[index]);\n//        vm.oldRelations().markAsDirty();\n//    };\n//\n//    vm.save = function() {\n//        vm.editEntityFormGroup.markAsPristine();\n//        widgetContext.rxjs.forkJoin([\n//            saveAttributes(entityId),\n//            saveRelations(entityId),\n//            saveEntity()\n//        ]).subscribe(\n//            function () {\n//                widgetContext.updateAliases();\n//                vm.dialogRef.close(null);\n//            }\n//        );\n//    };\n//\n//    function getEntityAttributes(attributes) {\n//        for (var i = 0; i < attributes.length; i++) {\n//            vm.attributes[attributes[i].key] = attributes[i].value;\n//        }\n//    }\n//\n//    function getEntityRelations(relations) {\n//        let relationsFrom = relations[0];\n//        let relationsTo = relations[1];\n//        for (let i=0; i < relationsFrom.length; i++) {\n//            let relation = {\n//                direction: 'FROM',\n//                relationType: relationsFrom[i].type,\n//                relatedEntity: relationsFrom[i].to\n//            };\n//            vm.oldRelationsData.push(relation);\n//            addOldRelation();\n//        }\n//        for (let i=0; i < relationsTo.length; i++) {\n//            let relation = {\n//                direction: 'TO',\n//                relationType: relationsTo[i].type,\n//                relatedEntity: relationsTo[i].from\n//            };\n//            vm.oldRelationsData.push(relation);\n//            addOldRelation();\n//        }\n//    }\n//\n//    function getEntityInfo() {\n//         widgetContext.rxjs.forkJoin([\n//             entityRelationService.findInfoByFrom(entityId),\n//             entityRelationService.findInfoByTo(entityId),\n//             attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE'),\n//             entityService.getEntity(entityId.entityType, entityId.id)\n//         ]).subscribe(\n//             function (data) {\n//                 getEntityRelations(data.slice(0,2));\n//                 getEntityAttributes(data[2]);\n//                 vm.entity = data[3];\n//                 vm.editEntityFormGroup.patchValue({\n//                     entityName: vm.entity.name,\n//                     entityType: vm.entityType,\n//                     entityLabel: vm.entity.label,\n//                     type: vm.entity.type,\n//                     attributes: vm.attributes,\n//                     oldRelations: vm.oldRelationsData\n//                 }, {emitEvent: false});\n//             }\n//         );\n//     }\n//\n//    function saveEntity() {\n//        const formValues = vm.editEntityFormGroup.value;\n//        if (vm.entity.label !== formValues.entityLabel){\n//            vm.entity.label = formValues.entityLabel;\n//            if (formValues.entityType == 'ASSET') {\n//                return assetService.saveAsset(vm.entity);\n//            } else if (formValues.entityType == 'DEVICE') {\n//                return deviceService.saveDevice(vm.entity);\n//            }\n//        }\n//        return widgetContext.rxjs.of([]);\n//    }\n//\n//    function saveAttributes(entityId) {\n//        let attributes = vm.editEntityFormGroup.get('attributes').value;\n//        let attributesArray = [];\n//        for (let key in attributes) {\n//            if (attributes[key] !== vm.attributes[key]) {\n//                attributesArray.push({key: key, value: attributes[key]});\n//            }\n//        }\n//        if (attributesArray.length > 0) {\n//            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n//        }\n//        return widgetContext.rxjs.of([]);\n//    }\n//\n//    function saveRelations(entityId) {\n//        let relations = vm.editEntityFormGroup.get('relations').value;\n//        let tasks = [];\n//        for(let i=0; i < relations.length; i++) {\n//            let relation = {\n//                type: relations[i].relationType,\n//                typeGroup: 'COMMON'\n//            };\n//            if (relations[i].direction == 'FROM') {\n//                relation.to = relations[i].relatedEntity;\n//                relation.from = entityId;\n//            } else {\n//                relation.to = entityId;\n//                relation.from = relations[i].relatedEntity;\n//            }\n//            tasks.push(entityRelationService.saveRelation(relation));\n//        }\n//        for (let i=0; i < vm.relationsToDelete.length; i++) {\n//            let relation = {\n//                type: vm.relationsToDelete[i].relationType\n//            };\n//            if (vm.relationsToDelete[i].direction == 'FROM') {\n//                relation.to = vm.relationsToDelete[i].relatedEntity;\n//                relation.from = entityId;\n//            } else {\n//                relation.to = entityId;\n//                relation.from = vm.relationsToDelete[i].relatedEntity;\n//            }\n//            tasks.push(entityRelationService.deleteRelation(relation.from, relation.type, relation.to));\n//        }\n//        if (tasks.length > 0) {\n//            return widgetContext.rxjs.forkJoin(tasks);\n//        }\n//        return widgetContext.rxjs.of([]);\n//    }\n//}\n//\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n//\n//let $injector = widgetContext.$scope.$injector;\n//let customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\n//let assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n//let deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n//let attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n//let entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n//\n//openAddEntityDialog();\n//\n//function openAddEntityDialog() {\n//    customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\n//}\n//\n//function AddEntityDialogController(instance) {\n//    let vm = instance;\n//\n//    vm.allowedEntityTypes = ['ASSET', 'DEVICE'];\n//    vm.entitySearchDirection = {\n//        from: \"FROM\",\n//        to: \"TO\"\n//    }\n//\n//    vm.addEntityFormGroup = vm.fb.group({\n//      entityName: ['', [vm.validators.required]],\n//      entityType: ['DEVICE'],\n//      entityLabel: [null],\n//      type: ['', [vm.validators.required]],\n//      attributes: vm.fb.group({\n//          latitude: [null],\n//          longitude: [null],\n//          address: [null],\n//          owner: [null],\n//          number: [null, [vm.validators.pattern(/^-?[0-9]+$/)]],\n//          booleanValue: [null]\n//      }),\n//      relations: vm.fb.array([])\n//    });\n//\n//    vm.cancel = function() {\n//        vm.dialogRef.close(null);\n//    };\n//\n//    vm.relations = function() {\n//        return vm.addEntityFormGroup.get('relations');\n//    };\n//\n//    vm.addRelation = function() {\n//        vm.relations().push(vm.fb.group({\n//          relatedEntity: [null, [vm.validators.required]],\n//          relationType: [null, [vm.validators.required]],\n//          direction: [null, [vm.validators.required]]\n//        }));\n//    };\n//\n//    vm.removeRelation = function(index) {\n//        vm.relations().removeAt(index);\n//        vm.relations().markAsDirty();\n//    };\n//\n//    vm.save = function() {\n//        vm.addEntityFormGroup.markAsPristine();\n//        saveEntityObservable().subscribe(\n//            function (entity) {\n//                widgetContext.rxjs.forkJoin([\n//                    saveAttributes(entity.id),\n//                    saveRelations(entity.id)\n//                ]).subscribe(\n//                    function () {\n//                        widgetContext.updateAliases();\n//                        vm.dialogRef.close(null);\n//                    }\n//                );\n//            }\n//        );\n//    };\n//\n//    function saveEntityObservable() {\n//        const formValues = vm.addEntityFormGroup.value;\n//        let entity = {\n//            name: formValues.entityName,\n//            type: formValues.type,\n//            label: formValues.entityLabel\n//        };\n//        if (formValues.entityType == 'ASSET') {\n//            return assetService.saveAsset(entity);\n//        } else if (formValues.entityType == 'DEVICE') {\n//            return deviceService.saveDevice(entity);\n//        }\n//    }\n//\n//    function saveAttributes(entityId) {\n//        let attributes = vm.addEntityFormGroup.get('attributes').value;\n//        let attributesArray = [];\n//        for (let key in attributes) {\n//            if(attributes[key] !== null) {\n//                attributesArray.push({key: key, value: attributes[key]});\n//            }\n//        }\n//        if (attributesArray.length > 0) {\n//            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n//        }\n//        return widgetContext.rxjs.of([]);\n//    }\n//\n//    function saveRelations(entityId) {\n//        let relations = vm.addEntityFormGroup.get('relations').value;\n//        let tasks = [];\n//        for(let i=0; i < relations.length; i++) {\n//            let relation = {\n//                type: relations[i].relationType,\n//                typeGroup: 'COMMON'\n//            };\n//            if (relations[i].direction == 'FROM') {\n//                relation.to = relations[i].relatedEntity;\n//                relation.from = entityId;\n//            } else {\n//                relation.to = entityId;\n//                relation.from = relations[i].relatedEntity;\n//            }\n//            tasks.push(entityRelationService.saveRelation(relation));\n//        }\n//        if (tasks.length > 0) {\n//            return widgetContext.rxjs.forkJoin(tasks);\n//        }\n//        return widgetContext.rxjs.of([]);\n//    }\n//}\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "24a472b3-5a34-55e7-e2ec-69cec88371dd"
              } ]
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "9d0fe424-5a78-1c37-0723-ae33b713ba2a"
        },
        "a5cf7c9d-768b-37e5-2c6a-ca7cf2d5977c" : {
          "isSystemType" : true,
          "bundleAlias" : "cards",
          "typeAlias" : "timeseries_table",
          "type" : "timeseries",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 8,
          "sizeY" : 6.5,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "047c4235-e87e-7caa-0359-449ce47ec1f9",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "Door Sensor 3456.open",
                "type" : "timeseries",
                "label" : "Door Sensor 3456",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.5256392626413713,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              } ],
              "latestDataKeys" : [ ]
            } ],
            "timewindow" : {
              "realtime" : {
                "interval" : 1000,
                "timewindowMs" : 60000
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "showTimestamp" : true,
              "displayPagination" : true,
              "defaultPageSize" : 10
            },
            "title" : "New Timeseries table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "widgetStyle" : { },
            "actions" : { },
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "a5cf7c9d-768b-37e5-2c6a-ca7cf2d5977c"
        },
        "80f1a116-fdb9-12db-df1c-a9983dd3e0ea" : {
          "isSystemType" : true,
          "bundleAlias" : "cards",
          "typeAlias" : "timeseries_table",
          "type" : "timeseries",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 8,
          "sizeY" : 6.5,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "4be71500-50ec-fdb3-179e-eb616c96e72b",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "Phase_A_power",
                "type" : "timeseries",
                "label" : "Phase_A_power",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.3905159124504096
              }, {
                "name" : "Phase_B_power",
                "type" : "timeseries",
                "label" : "Phase_B_power",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.293024875137611
              }, {
                "name" : "Phase_C_power",
                "type" : "timeseries",
                "label" : "Phase_C_power",
                "color" : "#f44336",
                "settings" : { },
                "_hash" : 0.49532763204236496
              }, {
                "name" : "operativo",
                "type" : "timeseries",
                "label" : "operativo",
                "color" : "#ffc107",
                "settings" : { },
                "_hash" : 0.16978312969256093,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : false,
                "postFuncBody" : null
              } ],
              "latestDataKeys" : [ ]
            } ],
            "timewindow" : {
              "hideInterval" : false,
              "hideLastInterval" : false,
              "hideQuickInterval" : false,
              "hideAggregation" : false,
              "hideAggInterval" : false,
              "hideTimezone" : false,
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 0,
                "timewindowMs" : 300000,
                "quickInterval" : "CURRENT_DAY",
                "interval" : 1000
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 6655
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "enableSearch" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "true",
              "showTimestamp" : true,
              "showMilliseconds" : false,
              "displayPagination" : true,
              "useEntityLabel" : false,
              "defaultPageSize" : 10,
              "hideEmptyLines" : false,
              "disableStickyHeader" : false,
              "useRowStyleFunction" : false
            },
            "title" : "New Timeseries table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "widgetStyle" : { },
            "actions" : { },
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "80f1a116-fdb9-12db-df1c-a9983dd3e0ea"
        },
        "255b5d5c-73a7-5e9d-074f-38e0092a4bee" : {
          "isSystemType" : true,
          "bundleAlias" : "cards",
          "typeAlias" : "simple_card",
          "type" : "latest",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "4be71500-50ec-fdb3-179e-eb616c96e72b",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "operativo",
                "type" : "timeseries",
                "label" : "Sec Pomeriggio",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.9380845206773094,
                "aggregationType" : "COUNT",
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null,
                "comparisonEnabled" : null
              } ]
            } ],
            "timewindow" : {
              "displayValue" : "",
              "hideInterval" : false,
              "hideLastInterval" : false,
              "hideQuickInterval" : false,
              "hideAggregation" : false,
              "hideAggInterval" : false,
              "hideTimezone" : false,
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_HOUR"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1681398491488,
                  "endTimeMs" : 1681484891488
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#ff5722",
            "color" : "rgba(255, 255, 255, 0.87)",
            "padding" : "16px",
            "settings" : {
              "labelPosition" : "top"
            },
            "title" : "New Simple card",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "units" : "",
            "decimals" : 0,
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "widgetStyle" : { },
            "actions" : { },
            "displayTimewindow" : true,
            "enableDataExport" : true,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "255b5d5c-73a7-5e9d-074f-38e0092a4bee"
        },
        "73d90ad3-b26a-7194-2d51-d5ad718c9317" : {
          "isSystemType" : true,
          "bundleAlias" : "cards",
          "typeAlias" : "simple_card",
          "type" : "latest",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "4be71500-50ec-fdb3-179e-eb616c96e72b",
              "filterId" : "f061b40d-1b77-3254-a775-bde8b4745942",
              "dataKeys" : [ {
                "name" : "operativo",
                "type" : "timeseries",
                "label" : "Sera",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.9380845206773094,
                "aggregationType" : "COUNT",
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : false,
                "postFuncBody" : null,
                "comparisonEnabled" : null
              } ]
            } ],
            "timewindow" : {
              "displayValue" : "",
              "hideInterval" : false,
              "hideLastInterval" : false,
              "hideQuickInterval" : false,
              "hideAggregation" : false,
              "hideAggInterval" : false,
              "hideTimezone" : false,
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_HOUR"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1681398491488,
                  "endTimeMs" : 1681484891488
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#ff5722",
            "color" : "rgba(255, 255, 255, 0.87)",
            "padding" : "16px",
            "settings" : {
              "labelPosition" : "top"
            },
            "title" : "New Simple card",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "units" : "",
            "decimals" : 0,
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "widgetStyle" : { },
            "actions" : { },
            "displayTimewindow" : true,
            "enableDataExport" : true,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "73d90ad3-b26a-7194-2d51-d5ad718c9317"
        },
        "a050e855-e152-eacf-0740-e04774b084b5" : {
          "isSystemType" : true,
          "bundleAlias" : "charts",
          "typeAlias" : "basic_timeseries",
          "type" : "timeseries",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 8,
          "sizeY" : 5,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "4be71500-50ec-fdb3-179e-eb616c96e72b",
              "filterId" : "2908e09f-7f2e-b155-ae40-4a133f175f6b",
              "dataKeys" : [ {
                "name" : "Phase_B_power",
                "type" : "timeseries",
                "label" : "Phase_B_power",
                "color" : "#f44336",
                "settings" : { },
                "_hash" : 0.9943071558503456
              } ],
              "latestDataKeys" : [ ]
            } ],
            "timewindow" : {
              "hideInterval" : false,
              "hideLastInterval" : false,
              "hideQuickInterval" : false,
              "hideAggregation" : false,
              "hideAggInterval" : false,
              "hideTimezone" : false,
              "selectedTab" : 1,
              "history" : {
                "historyType" : 0,
                "timewindowMs" : 300000,
                "interval" : 1000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1681305527025,
                  "endTimeMs" : 1681391927025
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 25000
              }
            },
            "showTitle" : true,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "shadowSize" : 4,
              "fontColor" : "#545454",
              "fontSize" : 10,
              "xaxis" : {
                "showLabels" : true,
                "color" : "#545454"
              },
              "yaxis" : {
                "showLabels" : true,
                "color" : "#545454"
              },
              "grid" : {
                "color" : "#545454",
                "tickColor" : "#DDDDDD",
                "verticalLines" : true,
                "horizontalLines" : true,
                "outlineWidth" : 1
              },
              "legend" : {
                "show" : true,
                "position" : "nw",
                "backgroundColor" : "#f0f0f0",
                "backgroundOpacity" : 0.85,
                "labelBoxBorderColor" : "rgba(1, 1, 1, 0.45)"
              },
              "decimals" : 1,
              "stack" : false,
              "tooltipIndividual" : false
            },
            "title" : "New Timeseries Line Chart",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : false,
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "a050e855-e152-eacf-0740-e04774b084b5"
        },
        "c5b049dc-b385-28a5-c34f-3cab95c83e72" : {
          "isSystemType" : true,
          "bundleAlias" : "cards",
          "typeAlias" : "timeseries_table",
          "type" : "timeseries",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 8,
          "sizeY" : 6.5,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "4be71500-50ec-fdb3-179e-eb616c96e72b",
              "filterId" : "f061b40d-1b77-3254-a775-bde8b4745942",
              "dataKeys" : [ {
                "name" : "operativo",
                "type" : "timeseries",
                "label" : "Sera",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.5829714840143039,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : false,
                "postFuncBody" : null
              } ],
              "latestDataKeys" : [ ]
            } ],
            "timewindow" : {
              "hideInterval" : false,
              "hideLastInterval" : false,
              "hideQuickInterval" : false,
              "hideAggregation" : false,
              "hideAggInterval" : false,
              "hideTimezone" : false,
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 0,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "interval" : 1000
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "showTimestamp" : true,
              "displayPagination" : true,
              "defaultPageSize" : 10
            },
            "title" : "New Timeseries table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "widgetStyle" : { },
            "actions" : { },
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "displayTimewindow" : true
          },
          "row" : 0,
          "col" : 0,
          "id" : "c5b049dc-b385-28a5-c34f-3cab95c83e72"
        },
        "792eb060-26b3-82bb-5480-f050cf232bff" : {
          "isSystemType" : true,
          "bundleAlias" : "entity_admin_widgets",
          "typeAlias" : "device_admin_table",
          "type" : "latest",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1681398491488,
                  "endTimeMs" : 1681484891488
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "enableSearch" : true,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "entityName",
              "displayEntityName" : true,
              "displayEntityType" : true,
              "entitiesTitle" : "Device admin table",
              "enableSelectColumnDisplay" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityLabel" : false,
              "useRowStyleFunction" : false
            },
            "title" : "New Device admin table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "047c4235-e87e-7caa-0359-449ce47ec1f9",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "majorAlarmsCount",
                "type" : "timeseries",
                "label" : "majorAlarmsCount",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.029827140150907372
              } ]
            } ],
            "showTitleIcon" : false,
            "titleIcon" : "more_horiz",
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "widgetStyle" : { },
            "displayTimewindow" : true,
            "actions" : {
              "headerButton" : [ {
                "name" : "Add device",
                "icon" : "add",
                "type" : "customPretty",
                "customHtml" : "<form #addDeviceForm=\"ngForm\" [formGroup]=\"addDeviceFormGroup\"\n      (ngSubmit)=\"save()\" style=\"width: 480px;\">\n  <mat-toolbar fxLayout=\"row\" color=\"primary\">\n    <h2>Add device</h2>\n    <span fxFlex></span>\n    <button mat-button mat-icon-button\n            (click)=\"cancel()\"\n            type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content>\n      <div class=\"mat-padding\" fxLayout=\"column\">\n            <mat-form-field class=\"mat-block\">\n                <mat-label>Device name</mat-label>\n                <input matInput formControlName=\"deviceName\" required>\n                <mat-error *ngIf=\"addDeviceFormGroup.get('deviceName').hasError('required')\">\n                    Device name is required.\n                </mat-error>\n            </mat-form-field>\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\">\n                <tb-entity-subtype-autocomplete\n                    fxFlex=\"50\"\n                    formControlName=\"deviceType\"\n                    [required]=\"true\"\n                    [entityType]=\"'DEVICE'\"\n                ></tb-entity-subtype-autocomplete>\n                <mat-form-field fxFlex=\"50\" class=\"mat-block\">\n                    <mat-label>Label</mat-label>\n                    <input matInput formControlName=\"deviceLabel\">\n                </mat-form-field>\n            </div>\n            <div formGroupName=\"attributes\" fxLayout=\"row\" fxLayoutGap=\"8px\">\n                <mat-form-field fxFlex=\"50\" class=\"mat-block\">\n                    <mat-label>Latitude</mat-label>\n                    <input type=\"number\" step=\"any\" matInput formControlName=\"latitude\">\n                </mat-form-field>\n                <mat-form-field fxFlex=\"50\" class=\"mat-block\">\n                    <mat-label>Longitude</mat-label>\n                    <input type=\"number\" step=\"any\" matInput formControlName=\"longitude\">\n                </mat-form-field>\n            </div>\n      </div>  \n  </div>\n  <div mat-dialog-actions fxLayout=\"row\">\n    <span fxFlex></span>\n    <button mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button mat-button mat-raised-button color=\"primary\"\n            style=\"margin-right: 20px;\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || addDeviceForm.invalid || !addDeviceForm.dirty\">\n      Create\n    </button>\n  </div>\n</form>\n",
                "customCss" : "",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nopenAddDeviceDialog();\n\nfunction openAddDeviceDialog() {\n    customDialog.customDialog(htmlTemplate, AddDeviceDialogController).subscribe();\n}\n\nfunction AddDeviceDialogController(instance) {\n    let vm = instance;\n    \n    vm.addDeviceFormGroup = vm.fb.group({\n      deviceName: ['', [vm.validators.required]],\n      deviceType: ['', [vm.validators.required]],\n      deviceLabel: [''],\n      attributes: vm.fb.group({\n          latitude: [null],\n          longitude: [null]\n      })      \n    });\n    \n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n    \n    vm.save = function() {\n        vm.addDeviceFormGroup.markAsPristine();\n        let device = {\n            name: vm.addDeviceFormGroup.get('deviceName').value,\n            type: vm.addDeviceFormGroup.get('deviceType').value,\n            label: vm.addDeviceFormGroup.get('deviceLabel').value\n        };\n        deviceService.saveDevice(device).subscribe(\n            function (device) {\n                saveAttributes(device.id).subscribe(\n                    function () {\n                        widgetContext.updateAliases();\n                        vm.dialogRef.close(null);\n                    }\n                );\n            }\n        );\n    };\n    \n    function saveAttributes(entityId) {\n        let attributes = vm.addDeviceFormGroup.get('attributes').value;\n        let attributesArray = [];\n        for (let key in attributes) {\n            attributesArray.push({key: key, value: attributes[key]});\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n        } else {\n            return widgetContext.rxjs.of([]);\n        }\n    }\n}",
                "customResources" : [ ],
                "id" : "70837a9d-c3de-a9a7-03c5-dccd14998758"
              } ],
              "actionCellButton" : [ {
                "name" : "Edit device",
                "icon" : "edit",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #editDeviceForm=\"ngForm\" [formGroup]=\"editDeviceFormGroup\"\n      (ngSubmit)=\"save()\" style=\"width: 480px;\">\n  <mat-toolbar fxLayout=\"row\" color=\"primary\">\n    <h2>Edit device</h2>\n    <span fxFlex></span>\n    <button mat-button mat-icon-button\n            (click)=\"cancel()\"\n            type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content>\n      <div class=\"mat-padding\" fxLayout=\"column\">\n            <mat-form-field class=\"mat-block\">\n                <mat-label>Device name</mat-label>\n                <input matInput formControlName=\"deviceName\" required>\n                <mat-error *ngIf=\"editDeviceFormGroup.get('deviceName').hasError('required')\">\n                    Device name is required.\n                </mat-error>\n            </mat-form-field>\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\">\n                <tb-entity-subtype-autocomplete\n                    fxFlex=\"50\"\n                    formControlName=\"deviceType\"\n                    [required]=\"true\"\n                    [entityType]=\"'DEVICE'\"\n                ></tb-entity-subtype-autocomplete>\n                <mat-form-field fxFlex=\"50\" class=\"mat-block\">\n                    <mat-label>Label</mat-label>\n                    <input matInput formControlName=\"deviceLabel\">\n                </mat-form-field>\n            </div>\n            <div formGroupName=\"attributes\" fxLayout=\"row\" fxLayoutGap=\"8px\">\n                <mat-form-field fxFlex=\"50\" class=\"mat-block\">\n                    <mat-label>Latitude</mat-label>\n                    <input type=\"number\" step=\"any\" matInput formControlName=\"latitude\">\n                </mat-form-field>\n                <mat-form-field fxFlex=\"50\" class=\"mat-block\">\n                    <mat-label>Longitude</mat-label>\n                    <input type=\"number\" step=\"any\" matInput formControlName=\"longitude\">\n                </mat-form-field>\n            </div>\n      </div>  \n  </div>\n  <div mat-dialog-actions fxLayout=\"row\">\n    <span fxFlex></span>\n    <button mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button mat-button mat-raised-button color=\"primary\"\n            style=\"margin-right: 20px;\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || editDeviceForm.invalid || !editDeviceForm.dirty\">\n      Update\n    </button>\n  </div>\n</form>\n",
                "customCss" : "",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nopenEditDeviceDialog();\n\nfunction openEditDeviceDialog() {\n    customDialog.customDialog(htmlTemplate, EditDeviceDialogController).subscribe();\n}\n\nfunction EditDeviceDialogController(instance) {\n    let vm = instance;\n    \n    vm.device = null;\n    vm.attributes = {};\n    \n    vm.editDeviceFormGroup = vm.fb.group({\n      deviceName: ['', [vm.validators.required]],\n      deviceType: ['', [vm.validators.required]],\n      deviceLabel: [''],\n      attributes: vm.fb.group({\n          latitude: [null],\n          longitude: [null]\n      })      \n    });\n    \n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n    \n    vm.save = function() {\n        vm.editDeviceFormGroup.markAsPristine();\n        if (vm.editDeviceFormGroup.get('deviceType').value !== vm.device.type) {\n            delete vm.device.deviceProfileId;\n        }\n        vm.device.name = vm.editDeviceFormGroup.get('deviceName').value,\n        vm.device.type = vm.editDeviceFormGroup.get('deviceType').value,\n        vm.device.label = vm.editDeviceFormGroup.get('deviceLabel').value\n        deviceService.saveDevice(vm.device).subscribe(\n            function () {\n                saveAttributes().subscribe(\n                    function () {\n                        widgetContext.updateAliases();\n                        vm.dialogRef.close(null);\n                    }\n                );\n            }\n        );\n    };\n    \n    getEntityInfo();\n    \n    function getEntityInfo() {\n        deviceService.getDevice(entityId.id).subscribe(\n            function (device) {\n                attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE',\n                                                    ['latitude', 'longitude']).subscribe(\n                   function (attributes) {\n                        for (let i = 0; i < attributes.length; i++) {\n                            vm.attributes[attributes[i].key] = attributes[i].value; \n                        }\n                        vm.device = device;\n                        vm.editDeviceFormGroup.patchValue(\n                            {\n                                deviceName: vm.device.name,\n                                deviceType: vm.device.type,\n                                deviceLabel: vm.device.label,\n                                attributes: {\n                                    latitude: vm.attributes.latitude,\n                                    longitude: vm.attributes.longitude\n                                }\n                            }, {emitEvent: false}\n                        );\n                   } \n                );\n            }\n        );    \n    }\n    \n    function saveAttributes() {\n        let attributes = vm.editDeviceFormGroup.get('attributes').value;\n        let attributesArray = [];\n        for (let key in attributes) {\n            attributesArray.push({key: key, value: attributes[key]});\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(entityId, 'SERVER_SCOPE', attributesArray);\n        } else {\n            return widgetContext.rxjs.of([]);\n        }\n    }\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "93931e52-5d7c-903e-67aa-b9435df44ff4"
              }, {
                "name" : "Delete device",
                "icon" : "delete",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n\nopenDeleteDeviceDialog();\n\nfunction openDeleteDeviceDialog() {\n    let title = \"Are you sure you want to delete the device \" + entityName +  \"?\";\n    let content = \"Be careful, after the confirmation, the device and all related data will become unrecoverable!\";\n    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n        function (result) {\n            if (result) {\n                deleteDevice();\n            }\n        }\n    );\n}\n\nfunction deleteDevice() {\n    deviceService.deleteDevice(entityId.id).subscribe(\n        function () {\n            widgetContext.updateAliases();\n        }\n    );\n}\n",
                "id" : "ec2708f6-9ff0-186b-e4fc-7635ebfa3074"
              } ]
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "792eb060-26b3-82bb-5480-f050cf232bff"
        },
        "1e220d6b-c9a2-2ab1-dd33-32b4c7117b28" : {
          "isSystemType" : true,
          "bundleAlias" : "scheduling",
          "typeAlias" : "scheduler_events",
          "type" : "static",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 7.5,
          "sizeY" : 4.5,
          "config" : {
            "timewindow" : {
              "realtime" : {
                "interval" : 1000,
                "timewindowMs" : 86400000
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "title" : "Scheduler events",
              "displayCreatedTime" : false,
              "displayType" : true,
              "displayCustomer" : true,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "name",
              "enabledViews" : "both",
              "customEventTypes" : [ ]
            },
            "title" : "New Scheduler events",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ ],
            "enableDataExport" : true,
            "widgetStyle" : { },
            "actions" : { }
          },
          "row" : 0,
          "col" : 0,
          "id" : "1e220d6b-c9a2-2ab1-dd33-32b4c7117b28"
        },
        "725cad03-bb32-974f-8830-8c60cb95b284" : {
          "isSystemType" : true,
          "bundleAlias" : "input_widgets",
          "typeAlias" : "update_multiple_attributes",
          "type" : "latest",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "b9428d1b-88dd-5657-b9c0-8bf8b4e77b9e",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "Phase_B_power_filter",
                "type" : "attribute",
                "label" : "Phase_B_power_filter",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.8667884809211874
              } ]
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1681398491488,
                  "endTimeMs" : 1681484891488
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "showResultMessage" : true,
              "showActionButtons" : false,
              "showGroupTitle" : false,
              "fieldsAlignment" : "row",
              "fieldsInRow" : 2,
              "groupTitle" : "${entityName}"
            },
            "title" : "New Update Multiple Attributes",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "enableDataExport" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : { },
            "showTitleIcon" : false,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "725cad03-bb32-974f-8830-8c60cb95b284"
        },
        "55a84b45-e973-da1b-e524-24575b52724f" : {
          "isSystemType" : true,
          "bundleAlias" : "control_widgets",
          "typeAlias" : "switch_control",
          "type" : "rpc",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 4,
          "sizeY" : 2.5,
          "config" : {
            "targetDeviceAliases" : [ ],
            "showTitle" : false,
            "backgroundColor" : "#e6e7e8",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "title" : "Switch control",
              "showOnOffLabels" : true,
              "initialValue" : true,
              "retrieveValueMethod" : "attribute",
              "valueKey" : "relay",
              "parseValueFunction" : "if(data==\"on\"){\n   return true; \n}else{\n    return false;\n}",
              "setValueMethod" : "relay",
              "convertValueFunction" : "return value;",
              "requestTimeout" : 500,
              "requestPersistent" : false
            },
            "title" : "New Switch Control",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : { },
            "decimals" : 2,
            "datasources" : [ ],
            "targetDeviceAliasIds" : [ "4be71500-50ec-fdb3-179e-eb616c96e72b" ]
          },
          "row" : 0,
          "col" : 0,
          "id" : "55a84b45-e973-da1b-e524-24575b52724f"
        }
      },
      "states" : {
        "default" : {
          "name" : "Sadia",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "9d0fe424-5a78-1c37-0723-ae33b713ba2a" : {
                  "sizeX" : 10,
                  "sizeY" : 6,
                  "row" : 0,
                  "col" : 0
                },
                "a5cf7c9d-768b-37e5-2c6a-ca7cf2d5977c" : {
                  "sizeX" : 8,
                  "sizeY" : 6,
                  "row" : 10,
                  "col" : 0
                },
                "80f1a116-fdb9-12db-df1c-a9983dd3e0ea" : {
                  "sizeX" : 14,
                  "sizeY" : 8,
                  "row" : 0,
                  "col" : 10
                },
                "255b5d5c-73a7-5e9d-074f-38e0092a4bee" : {
                  "sizeX" : 6,
                  "sizeY" : 3,
                  "row" : 6,
                  "col" : 0
                },
                "73d90ad3-b26a-7194-2d51-d5ad718c9317" : {
                  "sizeX" : 4,
                  "sizeY" : 3,
                  "row" : 6,
                  "col" : 6
                },
                "a050e855-e152-eacf-0740-e04774b084b5" : {
                  "sizeX" : 8,
                  "sizeY" : 5,
                  "row" : 11,
                  "col" : 8
                },
                "c5b049dc-b385-28a5-c34f-3cab95c83e72" : {
                  "sizeX" : 8,
                  "sizeY" : 5,
                  "row" : 11,
                  "col" : 16
                },
                "792eb060-26b3-82bb-5480-f050cf232bff" : {
                  "sizeX" : 13,
                  "sizeY" : 6,
                  "row" : 16,
                  "col" : 0
                },
                "1e220d6b-c9a2-2ab1-dd33-32b4c7117b28" : {
                  "sizeX" : 11,
                  "sizeY" : 6,
                  "row" : 16,
                  "col" : 13
                },
                "725cad03-bb32-974f-8830-8c60cb95b284" : {
                  "sizeX" : 4,
                  "sizeY" : 2,
                  "row" : 9,
                  "col" : 10
                },
                "55a84b45-e973-da1b-e524-24575b52724f" : {
                  "sizeX" : 4,
                  "sizeY" : 2,
                  "row" : 22,
                  "col" : 0
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "backgroundSizeMode" : "100%",
                "autoFillHeight" : false,
                "backgroundImageUrl" : null,
                "mobileAutoFillHeight" : false,
                "mobileRowHeight" : 70
              }
            }
          }
        }
      },
      "entityAliases" : {
        "047c4235-e87e-7caa-0359-449ce47ec1f9" : {
          "id" : "047c4235-e87e-7caa-0359-449ce47ec1f9",
          "alias" : "market",
          "filter" : {
            "type" : "entityGroup",
            "resolveMultiple" : true,
            "groupStateEntity" : false,
            "stateEntityParamName" : null,
            "defaultStateGroupType" : null,
            "defaultStateEntityGroup" : null,
            "groupType" : "CUSTOMER",
            "entityGroup" : "093d48b0-32a4-11ed-accb-016e0c746b7f"
          }
        },
        "4be71500-50ec-fdb3-179e-eb616c96e72b" : {
          "id" : "4be71500-50ec-fdb3-179e-eb616c96e72b",
          "alias" : "Energy",
          "filter" : {
            "type" : "singleEntity",
            "resolveMultiple" : false,
            "singleEntity" : {
              "entityType" : "DEVICE",
              "id" : "684afe70-a887-11ed-bcb8-7f48a6e846b2"
            }
          }
        },
        "b9428d1b-88dd-5657-b9c0-8bf8b4e77b9e" : {
          "id" : "b9428d1b-88dd-5657-b9c0-8bf8b4e77b9e",
          "alias" : "Current_User",
          "filter" : {
            "type" : "singleEntity",
            "resolveMultiple" : false,
            "singleEntity" : {
              "entityType" : "CURRENT_USER",
              "id" : "13814000-1dd2-11b2-8080-808080808080"
            }
          }
        }
      },
      "filters" : {
        "b2cdf77d-d3be-d087-41f7-4957bdeb7397" : {
          "id" : "b2cdf77d-d3be-d087-41f7-4957bdeb7397",
          "filter" : "Energy Pomeriggio",
          "keyFilters" : [ {
            "key" : {
              "type" : "TIME_SERIES",
              "key" : "operativo"
            },
            "valueType" : "STRING",
            "predicates" : [ {
              "keyFilterPredicate" : {
                "operation" : "EQUAL",
                "value" : {
                  "defaultValue" : "secondo_pomeriggio",
                  "dynamicValue" : null
                },
                "ignoreCase" : false,
                "type" : "STRING"
              },
              "userInfo" : {
                "editable" : true,
                "label" : "",
                "autogeneratedLabel" : true,
                "order" : 0
              }
            } ]
          } ],
          "editable" : true
        },
        "f061b40d-1b77-3254-a775-bde8b4745942" : {
          "id" : "f061b40d-1b77-3254-a775-bde8b4745942",
          "filter" : "Sera",
          "keyFilters" : [ {
            "key" : {
              "type" : "TIME_SERIES",
              "key" : "operativo"
            },
            "valueType" : "STRING",
            "predicates" : [ {
              "keyFilterPredicate" : {
                "operation" : "STARTS_WITH",
                "value" : {
                  "defaultValue" : "sera",
                  "dynamicValue" : null
                },
                "ignoreCase" : false,
                "type" : "STRING"
              },
              "userInfo" : {
                "editable" : true,
                "label" : "",
                "autogeneratedLabel" : true,
                "order" : 0
              }
            } ]
          } ],
          "editable" : true
        },
        "2908e09f-7f2e-b155-ae40-4a133f175f6b" : {
          "id" : "2908e09f-7f2e-b155-ae40-4a133f175f6b",
          "filter" : "Potenza B",
          "keyFilters" : [ {
            "key" : {
              "type" : "TIME_SERIES",
              "key" : "Phase_B_power"
            },
            "valueType" : "NUMERIC",
            "predicates" : [ {
              "keyFilterPredicate" : {
                "operation" : "GREATER",
                "value" : {
                  "defaultValue" : 0,
                  "dynamicValue" : {
                    "sourceType" : "CURRENT_USER",
                    "sourceAttribute" : "Phase_B_power_filter",
                    "inherit" : false
                  }
                },
                "type" : "NUMERIC"
              },
              "userInfo" : {
                "editable" : false,
                "label" : "Phase_B_power greater than",
                "autogeneratedLabel" : true,
                "order" : 0
              }
            } ]
          } ],
          "editable" : true
        }
      },
      "timewindow" : {
        "hideInterval" : false,
        "hideLastInterval" : false,
        "hideQuickInterval" : false,
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "hideTimezone" : false,
        "selectedTab" : 0,
        "realtime" : {
          "realtimeType" : 0,
          "timewindowMs" : 300000,
          "quickInterval" : "CURRENT_DAY",
          "interval" : 1000
        },
        "aggregation" : {
          "type" : "AVG",
          "limit" : 25000
        }
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : true,
        "showEntitiesSelect" : true,
        "showDashboardTimewindow" : true,
        "showDashboardExport" : true,
        "toolbarAlwaysOpen" : true,
        "titleColor" : "rgba(0,0,0,0.870588)",
        "showDashboardLogo" : false,
        "dashboardLogoUrl" : null,
        "hideToolbar" : false,
        "showFilters" : true,
        "showUpdateDashboardImage" : true,
        "dashboardCss" : ""
      }
    },
    "customerId" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "51b422e0-bea3-11ed-adcd-cbfdb5951e23"
    },
    "image" : null,
    "mobileHide" : false,
    "mobileOrder" : null,
    "name" : "Sadia",
    "ownerId" : null,
    "title" : "Sadia"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}